
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c8  080041c8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080041c8  080041c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041d0  080041d0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080041d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000068  08004240  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08004240  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ea0  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002164  00000000  00000000  00029f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002c0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000070f  00000000  00000000  0002ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016793  00000000  00000000  0002d157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd82  00000000  00000000  000438ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085ddf  00000000  00000000  0005166c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028f4  00000000  00000000  000d744c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000d9d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004134 	.word	0x08004134

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004134 	.word	0x08004134

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Bootloader_Send_ACK>:
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/

/************************************* Bootloader Helper Functions***************************************/
static void Bootloader_Send_ACK(uint8_t Replay_Len)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Value[2] = {0};
 8000586:	2300      	movs	r3, #0
 8000588:	81bb      	strh	r3, [r7, #12]
	Ack_Value[0] = CBL_SEND_ACK;
 800058a:	23cd      	movs	r3, #205	; 0xcd
 800058c:	733b      	strb	r3, [r7, #12]
	Ack_Value[1] = Replay_Len;
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	737b      	strb	r3, [r7, #13]
	Bootloader_Send_Data_To_Host((uint8_t*)Ack_Value , 2 );
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	2102      	movs	r1, #2
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f855 	bl	8000648 <Bootloader_Send_Data_To_Host>
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <Bootloader_Send_NACK>:
static void Bootloader_Send_NACK(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 80005ac:	23ab      	movs	r3, #171	; 0xab
 80005ae:	71fb      	strb	r3, [r7, #7]
	Bootloader_Send_Data_To_Host(&Ack_Value , 1);
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f847 	bl	8000648 <Bootloader_Send_Data_To_Host>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <Bootloader_CRC_Verify>:
static uint8_t Bootloader_CRC_Verify(uint8_t *pData , uint32_t Data_Len , uint32_t Host_CRC)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 80005d0:	2300      	movs	r3, #0
 80005d2:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
	/* Calculate CRC32 */
	for(Data_Counter = 0 ; Data_Counter < Data_Len ; Data_Counter++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	75fb      	strb	r3, [r7, #23]
 80005e4:	e00f      	b.n	8000606 <Bootloader_CRC_Verify+0x42>
	{
		Data_Buffer = (uint32_t)pData[Data_Counter];
 80005e6:	7dfb      	ldrb	r3, [r7, #23]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ , &Data_Buffer , 1);
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <Bootloader_CRC_Verify+0x80>)
 80005fa:	f001 f90e 	bl	800181a <HAL_CRC_Accumulate>
 80005fe:	61b8      	str	r0, [r7, #24]
	for(Data_Counter = 0 ; Data_Counter < Data_Len ; Data_Counter++)
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	3301      	adds	r3, #1
 8000604:	75fb      	strb	r3, [r7, #23]
 8000606:	7dfb      	ldrb	r3, [r7, #23]
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	429a      	cmp	r2, r3
 800060c:	d8eb      	bhi.n	80005e6 <Bootloader_CRC_Verify+0x22>
	}
	/* Reset The CRC Caclulation Unit */
	__HAL_CRC_DR_RESET(CRC_ENGINE_OBJ); 
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <Bootloader_CRC_Verify+0x80>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <Bootloader_CRC_Verify+0x80>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f042 0201 	orr.w	r2, r2, #1
 800061c:	609a      	str	r2, [r3, #8]

	/* Compare the host CRC32 with the calculated CRC32 */
	if(Host_CRC == MCU_CRC_Calculated){
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	429a      	cmp	r2, r3
 8000624:	d102      	bne.n	800062c <Bootloader_CRC_Verify+0x68>
		CRC_Status = CRC_VERIFICATION_PASSED;
 8000626:	2301      	movs	r3, #1
 8000628:	77fb      	strb	r3, [r7, #31]
 800062a:	e005      	b.n	8000638 <Bootloader_CRC_Verify+0x74>
	}
	else if (Host_CRC != MCU_CRC_Calculated){
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	429a      	cmp	r2, r3
 8000632:	d001      	beq.n	8000638 <Bootloader_CRC_Verify+0x74>
		CRC_Status = CRC_VERIFICATION_FAILED;
 8000634:	2300      	movs	r3, #0
 8000636:	77fb      	strb	r3, [r7, #31]
	}
	return CRC_Status;
 8000638:	7ffb      	ldrb	r3, [r7, #31]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000014c 	.word	0x2000014c

08000648 <Bootloader_Send_Data_To_Host>:

static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer , uint32_t Host_Buffer_Len)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART , Host_Buffer , Host_Buffer_Len , HAL_MAX_DELAY);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	b29a      	uxth	r2, r3
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <Bootloader_Send_Data_To_Host+0x24>)
 800065e:	f002 fcae 	bl	8002fbe <HAL_UART_Transmit>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000158 	.word	0x20000158

08000670 <Host_Address_Verification>:

static uint8_t Host_Address_Verification(uint32_t Jump_Address){
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM_BASE) && (Jump_Address <= STM32F401CCx_SRAM_END)){
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000682:	d306      	bcc.n	8000692 <Host_Address_Verification+0x22>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <Host_Address_Verification+0x4c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d802      	bhi.n	8000692 <Host_Address_Verification+0x22>
		Address_Verification = ADDRESS_IS_VALID;
 800068c:	2301      	movs	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	e00c      	b.n	80006ac <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F401CCx_FLASH_END)){
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000698:	d306      	bcc.n	80006a8 <Host_Address_Verification+0x38>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <Host_Address_Verification+0x50>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d802      	bhi.n	80006a8 <Host_Address_Verification+0x38>
		Address_Verification = ADDRESS_IS_VALID;
 80006a2:	2301      	movs	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	e001      	b.n	80006ac <Host_Address_Verification+0x3c>
	}
	else{
		Address_Verification = ADDRESS_IS_INVALID;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20010000 	.word	0x20010000
 80006c0:	08040000 	.word	0x08040000

080006c4 <Perform_Flash_Erase>:
static uint8_t Perform_Flash_Erase(uint8_t Sector_Number, uint8_t Number_Of_Sectors)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	460a      	mov	r2, r1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	71bb      	strb	r3, [r7, #6]
	uint8_t Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FLASH_EraseInitTypeDef pEraseInit;
	uint8_t Remaining_Sectors = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t SectorError = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
	if(Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER){
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d903      	bls.n	80006f2 <Perform_Flash_Erase+0x2e>
		/* Number Of sectors is out of range */
		Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006f0:	e03d      	b.n	800076e <Perform_Flash_Erase+0xaa>
	}
	else
	{
		if((Sector_Number <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == Sector_Number)){
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b05      	cmp	r3, #5
 80006f6:	d902      	bls.n	80006fe <Perform_Flash_Erase+0x3a>
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2bff      	cmp	r3, #255	; 0xff
 80006fc:	d134      	bne.n	8000768 <Perform_Flash_Erase+0xa4>
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Sector_Number){
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2bff      	cmp	r3, #255	; 0xff
 8000702:	d102      	bne.n	800070a <Perform_Flash_Erase+0x46>
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Flash Mass erase activation */
 8000704:	2301      	movs	r3, #1
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	e012      	b.n	8000730 <Perform_Flash_Erase+0x6c>
			else
			{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("User needs Sector erase \r\n");
#endif
				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Number;
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f1c3 0306 	rsb	r3, r3, #6
 8000710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(Number_Of_Sectors > Remaining_Sectors){
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800071a:	429a      	cmp	r2, r3
 800071c:	d902      	bls.n	8000724 <Perform_Flash_Erase+0x60>
					Number_Of_Sectors = Remaining_Sectors;
 800071e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000722:	71bb      	strb	r3, [r7, #6]
				}
				else { /* Nothing */ }

				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; /* Sectors erase only */
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
				pEraseInit.Sector = Sector_Number;        /* Initial FLASH sector to erase when Mass erase is disabled */
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	61bb      	str	r3, [r7, #24]
				pEraseInit.NbSectors = Number_Of_Sectors; /* Number of sectors to be erased. */
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	61fb      	str	r3, [r7, #28]
			}
			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 8000730:	2301      	movs	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; /* Device operating range: 2.7V to 3.6V */
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]

			/* Unlock the FLASH control register access */
			HAL_FLASH_Unlock();
 8000738:	f001 f8ee 	bl	8001918 <HAL_FLASH_Unlock>
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800073c:	f107 020c 	add.w	r2, r7, #12
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fa98 	bl	8001c7c <HAL_FLASHEx_Erase>
			if(HAL_SUCCESSFUL_ERASE == SectorError){
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000752:	d103      	bne.n	800075c <Perform_Flash_Erase+0x98>
				Sector_Validity_Status = SUCCESSFUL_ERASE;
 8000754:	2303      	movs	r3, #3
 8000756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800075a:	e002      	b.n	8000762 <Perform_Flash_Erase+0x9e>
			}
			else{
				Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 800075c:	2302      	movs	r3, #2
 800075e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			/* Locks the FLASH control register access */
			HAL_FLASH_Lock();
 8000762:	f001 f8fb 	bl	800195c <HAL_FLASH_Lock>
 8000766:	e002      	b.n	800076e <Perform_Flash_Erase+0xaa>
		}
		else
		{
			Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000768:	2300      	movs	r3, #0
 800076a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}
		return Sector_Validity_Status;
 800076e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000772:	4618      	mov	r0, r3
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <Flash_Memory_Write_Payload>:
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len)
{
 800077a:	b5b0      	push	{r4, r5, r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	4613      	mov	r3, r2
 8000786:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000788:	2301      	movs	r3, #1
 800078a:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 800078c:	2300      	movs	r3, #0
 800078e:	75bb      	strb	r3, [r7, #22]
	uint16_t Payload_Counter = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	82bb      	strh	r3, [r7, #20]

	/* Unlock the FLASH control register access */
	HAL_Status = HAL_FLASH_Unlock();
 8000794:	f001 f8c0 	bl	8001918 <HAL_FLASH_Unlock>
 8000798:	4603      	mov	r3, r0
 800079a:	75fb      	strb	r3, [r7, #23]

	if(HAL_Status != HAL_OK){
 800079c:	7dfb      	ldrb	r3, [r7, #23]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d002      	beq.n	80007a8 <Flash_Memory_Write_Payload+0x2e>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80007a2:	2300      	movs	r3, #0
 80007a4:	75bb      	strb	r3, [r7, #22]
 80007a6:	e023      	b.n	80007f0 <Flash_Memory_Write_Payload+0x76>
	}
	else{
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 80007a8:	2300      	movs	r3, #0
 80007aa:	82bb      	strh	r3, [r7, #20]
 80007ac:	e01c      	b.n	80007e8 <Flash_Memory_Write_Payload+0x6e>
			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Payload_Start_Address + Payload_Counter, Host_Payload[Payload_Counter]);
 80007ae:	8aba      	ldrh	r2, [r7, #20]
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	18d1      	adds	r1, r2, r3
 80007b4:	8abb      	ldrh	r3, [r7, #20]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2200      	movs	r2, #0
 80007c0:	461c      	mov	r4, r3
 80007c2:	4615      	mov	r5, r2
 80007c4:	4622      	mov	r2, r4
 80007c6:	462b      	mov	r3, r5
 80007c8:	2000      	movs	r0, #0
 80007ca:	f001 f851 	bl	8001870 <HAL_FLASH_Program>
 80007ce:	4603      	mov	r3, r0
 80007d0:	75fb      	strb	r3, [r7, #23]
			if(HAL_Status != HAL_OK){
 80007d2:	7dfb      	ldrb	r3, [r7, #23]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <Flash_Memory_Write_Payload+0x64>
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80007d8:	2300      	movs	r3, #0
 80007da:	75bb      	strb	r3, [r7, #22]
				break;
 80007dc:	e008      	b.n	80007f0 <Flash_Memory_Write_Payload+0x76>
			}
			else{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 80007de:	2301      	movs	r3, #1
 80007e0:	75bb      	strb	r3, [r7, #22]
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 80007e2:	8abb      	ldrh	r3, [r7, #20]
 80007e4:	3301      	adds	r3, #1
 80007e6:	82bb      	strh	r3, [r7, #20]
 80007e8:	8aba      	ldrh	r2, [r7, #20]
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3de      	bcc.n	80007ae <Flash_Memory_Write_Payload+0x34>
			}
		}
	}
	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status))
 80007f0:	7dbb      	ldrb	r3, [r7, #22]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d10e      	bne.n	8000814 <Flash_Memory_Write_Payload+0x9a>
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10b      	bne.n	8000814 <Flash_Memory_Write_Payload+0x9a>
	{
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 80007fc:	f001 f8ae 	bl	800195c <HAL_FLASH_Lock>
 8000800:	4603      	mov	r3, r0
 8000802:	75fb      	strb	r3, [r7, #23]
		if(HAL_Status != HAL_OK){
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <Flash_Memory_Write_Payload+0x96>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 800080a:	2300      	movs	r3, #0
 800080c:	75bb      	strb	r3, [r7, #22]
 800080e:	e001      	b.n	8000814 <Flash_Memory_Write_Payload+0x9a>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000810:	2301      	movs	r3, #1
 8000812:	75bb      	strb	r3, [r7, #22]
		}
	}
	return Flash_Payload_Write_Status;
 8000814:	7dbb      	ldrb	r3, [r7, #22]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000820 <bootloader_jump_to_user_app>:
static void bootloader_jump_to_user_app(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	/* Reset Handler definition function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4));
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <bootloader_jump_to_user_app+0x28>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	607b      	str	r3, [r7, #4]

	/* Fetch the reset handler address of the user application */
	pMainApp ResetHandler_Address = (pMainApp)(MainAppAddr);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	603b      	str	r3, [r7, #0]
	/* Set Main Stack Pointer */
	SCB->VTOR = FLASH_SECTOR2_BASE_ADDRESS;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <bootloader_jump_to_user_app+0x2c>)
 8000832:	4a07      	ldr	r2, [pc, #28]	; (8000850 <bootloader_jump_to_user_app+0x30>)
 8000834:	609a      	str	r2, [r3, #8]
	/* DeInitialize / Disable of modules */
	HAL_RCC_DeInit(); /* DeInitialize the RCC clock configuration to the default reset state. */
 8000836:	f002 faa7 	bl	8002d88 <HAL_RCC_DeInit>
	                  /* Disable Maskable Interrupt */


	/* Jump to Application Reset Handler */
	ResetHandler_Address();
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	4798      	blx	r3
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	08008004 	.word	0x08008004
 800084c:	e000ed00 	.word	0xe000ed00
 8000850:	08008000 	.word	0x08008000

08000854 <CBL_STM32F401CCx_Get_RDP_Level>:
static uint8_t CBL_STM32F401CCx_Get_RDP_Level(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f001 faeb 	bl	8001e38 <HAL_FLASHEx_OBGetConfig>

	return (uint8_t)(FLASH_OBProgram.RDPLevel);
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	b2db      	uxtb	r3, r3
}
 8000866:	4618      	mov	r0, r3
 8000868:	3720      	adds	r7, #32
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <Change_ROP_Level>:
static uint8_t Change_ROP_Level(uint32_t ROP_Level){
 800086e:	b580      	push	{r7, lr}
 8000870:	b08a      	sub	sp, #40	; 0x28
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	FLASH_OBProgramInitTypeDef FLASH_OBProgramInit;
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 800087c:	2300      	movs	r3, #0
 800087e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Unlock the FLASH Option Control Registers access */
	HAL_Status = HAL_FLASH_OB_Unlock();
 8000882:	f001 f87b 	bl	800197c <HAL_FLASH_OB_Unlock>
 8000886:	4603      	mov	r3, r0
 8000888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(HAL_Status != HAL_OK){
 800088c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000890:	2b00      	cmp	r3, #0
 8000892:	d003      	beq.n	800089c <Change_ROP_Level+0x2e>
		ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000894:	2300      	movs	r3, #0
 8000896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800089a:	e03c      	b.n	8000916 <Change_ROP_Level+0xa8>
	}
	else{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("Passed -> Unlock the FLASH Option Control Registers access \r\n");
#endif
		FLASH_OBProgramInit.OptionType = OPTIONBYTE_RDP; /* RDP option byte configuration */
 800089c:	2302      	movs	r3, #2
 800089e:	60bb      	str	r3, [r7, #8]
		FLASH_OBProgramInit.Banks = FLASH_BANK_1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
		FLASH_OBProgramInit.RDPLevel = ROP_Level;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	61bb      	str	r3, [r7, #24]
		/* Program option bytes */
		HAL_Status = HAL_FLASHEx_OBProgram(&FLASH_OBProgramInit);
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fa55 	bl	8001d5c <HAL_FLASHEx_OBProgram>
 80008b2:	4603      	mov	r3, r0
 80008b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(HAL_Status != HAL_OK){
 80008b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d008      	beq.n	80008d2 <Change_ROP_Level+0x64>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Failed -> Program option bytes \r\n");
#endif
			HAL_Status = HAL_FLASH_OB_Lock();
 80008c0:	f001 f878 	bl	80019b4 <HAL_FLASH_OB_Lock>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008d0:	e021      	b.n	8000916 <Change_ROP_Level+0xa8>
		else{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Passed -> Program option bytes \r\n");
#endif
			/* Launch the option byte loading */
			HAL_Status = HAL_FLASH_OB_Launch();
 80008d2:	f001 f87f 	bl	80019d4 <HAL_FLASH_OB_Launch>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if(HAL_Status != HAL_OK){
 80008dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d008      	beq.n	80008f6 <Change_ROP_Level+0x88>
				HAL_Status = HAL_FLASH_OB_Lock();
 80008e4:	f001 f866 	bl	80019b4 <HAL_FLASH_OB_Lock>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008f4:	e00f      	b.n	8000916 <Change_ROP_Level+0xa8>
			}
			else{
				/* Lock the FLASH Option Control Registers access */
				HAL_Status = HAL_FLASH_OB_Lock();
 80008f6:	f001 f85d 	bl	80019b4 <HAL_FLASH_OB_Lock>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(HAL_Status != HAL_OK){
 8000900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <Change_ROP_Level+0xa2>
					ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800090e:	e002      	b.n	8000916 <Change_ROP_Level+0xa8>
				}
				else{
					ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 8000910:	2301      	movs	r3, #1
 8000912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
				}
			}
		}
	}
	return ROP_Level_Status;
 8000916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800091a:	4618      	mov	r0, r3
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <CBL_ED_WriteProtection>:
static uint8_t CBL_ED_WriteProtection(uint8_t ED_Status , uint8_t Sector_Number)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b08a      	sub	sp, #40	; 0x28
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	460a      	mov	r2, r1
 800092c:	71fb      	strb	r3, [r7, #7]
 800092e:	4613      	mov	r3, r2
 8000930:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	FLASH_OBProgramInitTypeDef FLASH_OBProgramInit;
	uint8_t WP_Status = CBL_WP_CHANGE_INVALID;
 8000938:	2300      	movs	r3, #0
 800093a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Unlock the FLASH Option Control Registers access */
	HAL_Status = HAL_FLASH_OB_Unlock();
 800093e:	f001 f81d 	bl	800197c <HAL_FLASH_OB_Unlock>
 8000942:	4603      	mov	r3, r0
 8000944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(HAL_Status != HAL_OK)
 8000948:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800094c:	2b00      	cmp	r3, #0
 800094e:	d003      	beq.n	8000958 <CBL_ED_WriteProtection+0x36>
	{
		WP_Status = CBL_WP_CHANGE_INVALID;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000956:	e041      	b.n	80009dc <CBL_ED_WriteProtection+0xba>
	}
	else{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("Passed -> Unlock the FLASH Option Control Registers access \r\n");
#endif
		FLASH_OBProgramInit.OptionType =OPTIONBYTE_WRP ; /* RDP option byte configuration */
 8000958:	2301      	movs	r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
		FLASH_OBProgramInit.Banks = FLASH_BANK_1;
 800095c:	2301      	movs	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
		FLASH_OBProgramInit.WRPSector = 1 << Sector_Number;
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	2201      	movs	r2, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	613b      	str	r3, [r7, #16]
		FLASH_OBProgramInit.WRPState = ED_Status;
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	60fb      	str	r3, [r7, #12]
		/* Program option bytes */
		HAL_Status = HAL_FLASHEx_OBProgram(&FLASH_OBProgramInit);
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f9f2 	bl	8001d5c <HAL_FLASHEx_OBProgram>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(HAL_Status != HAL_OK)
 800097e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000982:	2b00      	cmp	r3, #0
 8000984:	d008      	beq.n	8000998 <CBL_ED_WriteProtection+0x76>
		{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Failed -> Program option bytes \r\n");
#endif
			HAL_Status = HAL_FLASH_OB_Lock();
 8000986:	f001 f815 	bl	80019b4 <HAL_FLASH_OB_Lock>
 800098a:	4603      	mov	r3, r0
 800098c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			WP_Status = CBL_WP_CHANGE_INVALID;
 8000990:	2300      	movs	r3, #0
 8000992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000996:	e021      	b.n	80009dc <CBL_ED_WriteProtection+0xba>
		{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Passed -> Program option bytes \r\n");
#endif
			/* Launch the option byte loading */
			HAL_Status = HAL_FLASH_OB_Launch();
 8000998:	f001 f81c 	bl	80019d4 <HAL_FLASH_OB_Launch>
 800099c:	4603      	mov	r3, r0
 800099e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if(HAL_Status != HAL_OK)
 80009a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d008      	beq.n	80009bc <CBL_ED_WriteProtection+0x9a>
			{
				HAL_Status = HAL_FLASH_OB_Lock();
 80009aa:	f001 f803 	bl	80019b4 <HAL_FLASH_OB_Lock>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				WP_Status = CBL_WP_CHANGE_INVALID;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009ba:	e00f      	b.n	80009dc <CBL_ED_WriteProtection+0xba>
			}
			else{
				/* Lock the FLASH Option Control Registers access */
				HAL_Status = HAL_FLASH_OB_Lock();
 80009bc:	f000 fffa 	bl	80019b4 <HAL_FLASH_OB_Lock>
 80009c0:	4603      	mov	r3, r0
 80009c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(HAL_Status != HAL_OK)
 80009c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <CBL_ED_WriteProtection+0xb4>
				{
					WP_Status = CBL_WP_CHANGE_INVALID;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009d4:	e002      	b.n	80009dc <CBL_ED_WriteProtection+0xba>
				}
				else
				{
					WP_Status = CBL_WP_CHANGE_VALID;
 80009d6:	2301      	movs	r3, #1
 80009d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	#endif
				}
			}
		}
	}
	return WP_Status;
 80009dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <CBL_Get_WriteProtection_Status>:
static uint8_t CBL_Get_WriteProtection_Status(uint8_t SectorNumber)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef FLASH_OBProgramInit;

	FLASH_OBProgramInit.OptionType =OPTIONBYTE_WRP ; /* WP option byte configuration */
 80009f2:	2301      	movs	r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgramInit);
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fa1c 	bl	8001e38 <HAL_FLASHEx_OBGetConfig>

	return (uint8_t)(!(FLASH_OBProgramInit.WRPSector >> SectorNumber & 0x01));
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	fa22 f303 	lsr.w	r3, r2, r3
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bf0c      	ite	eq
 8000a10:	2301      	moveq	r3, #1
 8000a12:	2300      	movne	r3, #0
 8000a14:	b2db      	uxtb	r3, r3
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <Bootloader_Get_Version>:



/******************************** Bootloader Commands Static Functions ******************************************/
static void Bootloader_Get_Version(uint8_t *Host_Buffer)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION };
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <Bootloader_Get_Version+0x60>)
 8000a2a:	60fb      	str	r3, [r7, #12]
	uint16_t Host_CMD_Packet_Len = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the bootloader version from the MCU \r\n");
#endif
	/* Extract the CRC32 and Packet length from the host buffer */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t*)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 8000a3e:	8afb      	ldrh	r3, [r7, #22]
 8000a40:	3b04      	subs	r3, #4
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	613b      	str	r3, [r7, #16]

	/*********** CRC Verification *************/
	if(Bootloader_CRC_Verify(Host_Buffer,Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_PASSED)
 8000a4a:	8afb      	ldrh	r3, [r7, #22]
 8000a4c:	3b04      	subs	r3, #4
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4619      	mov	r1, r3
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff fdb6 	bl	80005c4 <Bootloader_CRC_Verify>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d109      	bne.n	8000a72 <Bootloader_Get_Version+0x52>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(4);
 8000a5e:	2004      	movs	r0, #4
 8000a60:	f7ff fd8c 	bl	800057c <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t*)BL_Version ,4);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2104      	movs	r1, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fdec 	bl	8000648 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000a70:	e001      	b.n	8000a76 <Bootloader_Get_Version+0x56>
		Bootloader_Send_NACK();
 8000a72:	f7ff fd98 	bl	80005a6 <Bootloader_Send_NACK>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	00020164 	.word	0x00020164

08000a84 <Bootloader_Get_Help>:
static void Bootloader_Get_Help(uint8_t *Host_Buffer)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	81fb      	strh	r3, [r7, #14]
	uint32_t Host_CRC32 = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the commands supported by the bootloader \r\n");
#endif
	/* Extract the CRC32 and Packet length from the host buffer */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((uint32_t*)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	3b04      	subs	r3, #4
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60bb      	str	r3, [r7, #8]

	/*********** CRC Verification *************/
	if(Bootloader_CRC_Verify(Host_Buffer,Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_PASSED)
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	3b04      	subs	r3, #4
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fd86 	bl	80005c4 <Bootloader_CRC_Verify>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d107      	bne.n	8000ace <Bootloader_Get_Help+0x4a>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(11);
 8000abe:	200b      	movs	r0, #11
 8000ac0:	f7ff fd5c 	bl	800057c <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)(&Bootloader_Supported_CMDs[0]), 11);
 8000ac4:	210b      	movs	r1, #11
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <Bootloader_Get_Help+0x58>)
 8000ac8:	f7ff fdbe 	bl	8000648 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000acc:	e001      	b.n	8000ad2 <Bootloader_Get_Help+0x4e>
		Bootloader_Send_NACK();
 8000ace:	f7ff fd6a 	bl	80005a6 <Bootloader_Send_NACK>
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000000 	.word	0x20000000

08000ae0 <Bootloader_Get_Chip_Identification_Number>:
static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	81fb      	strh	r3, [r7, #14]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the MCU chip identification number \r\n");
#endif
	/* Extract the CRC32 and Packet length from the host buffer */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	3301      	adds	r3, #1
 8000afc:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t*)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 8000afe:	8afb      	ldrh	r3, [r7, #22]
 8000b00:	3b04      	subs	r3, #4
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	613b      	str	r3, [r7, #16]

	MCU_Identification_Number =(uint16_t)(DBGMCU->IDCODE & 0x000000FFF);
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <Bootloader_Get_Chip_Identification_Number+0x6c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	81fb      	strh	r3, [r7, #14]
	/*********** CRC Verification *************/
	if(Bootloader_CRC_Verify(Host_Buffer,Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_PASSED)
 8000b18:	8afb      	ldrh	r3, [r7, #22]
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fd4f 	bl	80005c4 <Bootloader_CRC_Verify>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d109      	bne.n	8000b40 <Bootloader_Get_Chip_Identification_Number+0x60>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(2);
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f7ff fd25 	bl	800057c <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)(&MCU_Identification_Number), 2);
 8000b32:	f107 030e 	add.w	r3, r7, #14
 8000b36:	2102      	movs	r1, #2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fd85 	bl	8000648 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000b3e:	e001      	b.n	8000b44 <Bootloader_Get_Chip_Identification_Number+0x64>
		Bootloader_Send_NACK();
 8000b40:	f7ff fd31 	bl	80005a6 <Bootloader_Send_NACK>
}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	e0042000 	.word	0xe0042000

08000b50 <Bootloader_Jump_To_Address>:

static void Bootloader_Jump_To_Address(uint8_t *Host_Buffer)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	83fb      	strh	r3, [r7, #30]
	uint32_t Host_CRC32 = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61bb      	str	r3, [r7, #24]
	uint32_t HOST_Jump_Address = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
	Jump_Ptr Jump_Address = NULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Jump bootloader to specified address \r\n");
#endif
	/* Extract the CRC32 and Packet length from the host buffer */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	3301      	adds	r3, #1
 8000b74:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t*)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 8000b76:	8bfb      	ldrh	r3, [r7, #30]
 8000b78:	3b04      	subs	r3, #4
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	61bb      	str	r3, [r7, #24]

	/*********** CRC Verification *************/
	if(Bootloader_CRC_Verify(Host_Buffer,Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_PASSED)
 8000b82:	8bfb      	ldrh	r3, [r7, #30]
 8000b84:	3b04      	subs	r3, #4
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fd1a 	bl	80005c4 <Bootloader_CRC_Verify>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d121      	bne.n	8000bda <Bootloader_Jump_To_Address+0x8a>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fcf0 	bl	800057c <Bootloader_Send_ACK>
		/* Extract the address form the HOST packet */
		HOST_Jump_Address = *((uint32_t *)&Host_Buffer[2]);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000ba2:	617b      	str	r3, [r7, #20]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Jump_Address);
 8000ba4:	6978      	ldr	r0, [r7, #20]
 8000ba6:	f7ff fd63 	bl	8000670 <Host_Address_Verification>
 8000baa:	4603      	mov	r3, r0
 8000bac:	73fb      	strb	r3, [r7, #15]
		if(ADDRESS_IS_VALID == Address_Verification)
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d10b      	bne.n	8000bcc <Bootloader_Jump_To_Address+0x7c>
		{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Address verification succeeded \r\n");
#endif
			/* Report address verification succeeded */
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000bb4:	f107 030f 	add.w	r3, r7, #15
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fd44 	bl	8000648 <Bootloader_Send_Data_To_Host>
			Jump_Address = (Jump_Ptr)(HOST_Jump_Address+1);
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Jump to : 0x%X \r\n", Jump_Address);
#endif
			Jump_Address();
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	4798      	blx	r3
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000bca:	e008      	b.n	8000bde <Bootloader_Jump_To_Address+0x8e>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000bcc:	f107 030f 	add.w	r3, r7, #15
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fd38 	bl	8000648 <Bootloader_Send_Data_To_Host>
}
 8000bd8:	e001      	b.n	8000bde <Bootloader_Jump_To_Address+0x8e>
		Bootloader_Send_NACK();
 8000bda:	f7ff fce4 	bl	80005a6 <Bootloader_Send_NACK>
}
 8000bde:	bf00      	nop
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <Bootloader_Erase_Flash>:
static void Bootloader_Erase_Flash(uint8_t *Host_Buffer)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Mass erase or sector erase of the user flash \r\n");
#endif
	/* Extract the CRC32 and Packet length from the host buffer */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	3301      	adds	r3, #1
 8000c02:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t*)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 8000c04:	8afb      	ldrh	r3, [r7, #22]
 8000c06:	3b04      	subs	r3, #4
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	613b      	str	r3, [r7, #16]

	/*********** CRC Verification *************/
	if(Bootloader_CRC_Verify(Host_Buffer,Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_PASSED)
 8000c10:	8afb      	ldrh	r3, [r7, #22]
 8000c12:	3b04      	subs	r3, #4
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4619      	mov	r1, r3
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fcd3 	bl	80005c4 <Bootloader_CRC_Verify>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d11f      	bne.n	8000c64 <Bootloader_Erase_Flash+0x7e>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff fca9 	bl	800057c <Bootloader_Send_ACK>
		/* Perform Mass erase or sector erase of the user flash */
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3302      	adds	r3, #2
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3303      	adds	r3, #3
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4619      	mov	r1, r3
 8000c38:	4610      	mov	r0, r2
 8000c3a:	f7ff fd43 	bl	80006c4 <Perform_Flash_Erase>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	73fb      	strb	r3, [r7, #15]
		if(SUCCESSFUL_ERASE == Erase_Status){
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d106      	bne.n	8000c56 <Bootloader_Erase_Flash+0x70>
			/* Report erase Passed */
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000c48:	f107 030f 	add.w	r3, r7, #15
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fcfa 	bl	8000648 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000c54:	e008      	b.n	8000c68 <Bootloader_Erase_Flash+0x82>
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000c56:	f107 030f 	add.w	r3, r7, #15
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fcf3 	bl	8000648 <Bootloader_Send_Data_To_Host>
}
 8000c62:	e001      	b.n	8000c68 <Bootloader_Erase_Flash+0x82>
		Bootloader_Send_NACK();
 8000c64:	f7ff fc9f 	bl	80005a6 <Bootloader_Send_NACK>
}
 8000c68:	bf00      	nop
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <Bootloader_Memory_Write>:
static void Bootloader_Memory_Write(uint8_t *Host_Buffer)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
	uint32_t HOST_Address = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
	uint8_t Payload_Len = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	72fb      	strb	r3, [r7, #11]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	72bb      	strb	r3, [r7, #10]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	727b      	strb	r3, [r7, #9]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Write data into different memories of the MCU \r\n");
#endif
	/* Extract the CRC32 and Packet length from the host buffer */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	3301      	adds	r3, #1
 8000c98:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t*)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 8000c9a:	8afb      	ldrh	r3, [r7, #22]
 8000c9c:	3b04      	subs	r3, #4
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	613b      	str	r3, [r7, #16]

	/*********** CRC Verification *************/
	if(Bootloader_CRC_Verify(Host_Buffer,Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_PASSED)
 8000ca6:	8afb      	ldrh	r3, [r7, #22]
 8000ca8:	3b04      	subs	r3, #4
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4619      	mov	r1, r3
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff fc88 	bl	80005c4 <Bootloader_CRC_Verify>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d135      	bne.n	8000d26 <Bootloader_Memory_Write+0xb6>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(1);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff fc5e 	bl	800057c <Bootloader_Send_ACK>
		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000cc6:	60fb      	str	r3, [r7, #12]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("HOST_Address = 0x%X \r\n", HOST_Address);
#endif
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	799b      	ldrb	r3, [r3, #6]
 8000ccc:	72fb      	strb	r3, [r7, #11]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f7ff fcce 	bl	8000670 <Host_Address_Verification>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification){
 8000cd8:	7abb      	ldrb	r3, [r7, #10]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d11a      	bne.n	8000d14 <Bootloader_Memory_Write+0xa4>
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3307      	adds	r3, #7
 8000ce2:	7afa      	ldrb	r2, [r7, #11]
 8000ce4:	b292      	uxth	r2, r2
 8000ce6:	68f9      	ldr	r1, [r7, #12]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fd46 	bl	800077a <Flash_Memory_Write_Payload>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	727b      	strb	r3, [r7, #9]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 8000cf2:	7a7b      	ldrb	r3, [r7, #9]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d106      	bne.n	8000d06 <Bootloader_Memory_Write+0x96>
				/* Report payload write passed */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000cf8:	f107 0309 	add.w	r3, r7, #9
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fca2 	bl	8000648 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000d04:	e011      	b.n	8000d2a <Bootloader_Memory_Write+0xba>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000d06:	f107 0309 	add.w	r3, r7, #9
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fc9b 	bl	8000648 <Bootloader_Send_Data_To_Host>
}
 8000d12:	e00a      	b.n	8000d2a <Bootloader_Memory_Write+0xba>
			Address_Verification = ADDRESS_IS_INVALID;
 8000d14:	2300      	movs	r3, #0
 8000d16:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000d18:	f107 030a 	add.w	r3, r7, #10
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fc92 	bl	8000648 <Bootloader_Send_Data_To_Host>
}
 8000d24:	e001      	b.n	8000d2a <Bootloader_Memory_Write+0xba>
		Bootloader_Send_NACK();
 8000d26:	f7ff fc3e 	bl	80005a6 <Bootloader_Send_NACK>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <Bootloader_Read_Protection_Level>:
static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
	uint8_t RDP_Level = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the FLASH Read Protection Out level \r\n");
#endif
	/* Extract the CRC32 and Packet length from the host buffer */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t*)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 8000d50:	8afb      	ldrh	r3, [r7, #22]
 8000d52:	3b04      	subs	r3, #4
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	613b      	str	r3, [r7, #16]

	/*********** CRC Verification *************/
	if(Bootloader_CRC_Verify(Host_Buffer,Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_PASSED)
 8000d5c:	8afb      	ldrh	r3, [r7, #22]
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4619      	mov	r1, r3
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff fc2d 	bl	80005c4 <Bootloader_CRC_Verify>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d10d      	bne.n	8000d8c <Bootloader_Read_Protection_Level+0x5a>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff fc03 	bl	800057c <Bootloader_Send_ACK>
		/* Read Protection Level */
		RDP_Level = CBL_STM32F401CCx_Get_RDP_Level();
 8000d76:	f7ff fd6d 	bl	8000854 <CBL_STM32F401CCx_Get_RDP_Level>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
		/* Report Valid Protection Level */
		Bootloader_Send_Data_To_Host((uint8_t *)&RDP_Level, 1);
 8000d7e:	f107 030f 	add.w	r3, r7, #15
 8000d82:	2101      	movs	r1, #1
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fc5f 	bl	8000648 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000d8a:	e001      	b.n	8000d90 <Bootloader_Read_Protection_Level+0x5e>
		Bootloader_Send_NACK();
 8000d8c:	f7ff fc0b 	bl	80005a6 <Bootloader_Send_NACK>
}
 8000d90:	bf00      	nop
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <Bootloader_Change_Read_Protection_Level>:
static void Bootloader_Change_Read_Protection_Level(uint8_t *Host_Buffer)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	82bb      	strh	r3, [r7, #20]
	uint32_t Host_CRC32 = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
	uint8_t Host_ROP_Level = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	75fb      	strb	r3, [r7, #23]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Change read protection level of the user flash \r\n");
#endif
	/* Extract the CRC32 and Packet length from the host buffer */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	3301      	adds	r3, #1
 8000db8:	82bb      	strh	r3, [r7, #20]
	Host_CRC32 = *((uint32_t*)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 8000dba:	8abb      	ldrh	r3, [r7, #20]
 8000dbc:	3b04      	subs	r3, #4
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	613b      	str	r3, [r7, #16]

	/*********** CRC Verification *************/
	if(Bootloader_CRC_Verify(Host_Buffer,Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_PASSED)
 8000dc6:	8abb      	ldrh	r3, [r7, #20]
 8000dc8:	3b04      	subs	r3, #4
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fbf8 	bl	80005c4 <Bootloader_CRC_Verify>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d126      	bne.n	8000e28 <Bootloader_Change_Read_Protection_Level+0x90>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(1);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fbce 	bl	800057c <Bootloader_Send_ACK>
		/* Request change the Read Out Protection Level */
		Host_ROP_Level = Host_Buffer[2];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	789b      	ldrb	r3, [r3, #2]
 8000de4:	75fb      	strb	r3, [r7, #23]
		/* Warning: When enabling read protection level 2, it s no more possible to go back to level 1 or 0 */
		if((CBL_ROP_LEVEL_2 == Host_ROP_Level) || (OB_RDP_LEVEL_2 == Host_ROP_Level)){
 8000de6:	7dfb      	ldrb	r3, [r7, #23]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d002      	beq.n	8000df2 <Bootloader_Change_Read_Protection_Level+0x5a>
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	2bcc      	cmp	r3, #204	; 0xcc
 8000df0:	d102      	bne.n	8000df8 <Bootloader_Change_Read_Protection_Level+0x60>
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e010      	b.n	8000e1a <Bootloader_Change_Read_Protection_Level+0x82>
		}
		else{
			if(CBL_ROP_LEVEL_0 == Host_ROP_Level){
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <Bootloader_Change_Read_Protection_Level+0x6c>
				Host_ROP_Level = 0xAA;
 8000dfe:	23aa      	movs	r3, #170	; 0xaa
 8000e00:	75fb      	strb	r3, [r7, #23]
 8000e02:	e004      	b.n	8000e0e <Bootloader_Change_Read_Protection_Level+0x76>
			}
			else if(CBL_ROP_LEVEL_1 == Host_ROP_Level){
 8000e04:	7dfb      	ldrb	r3, [r7, #23]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d101      	bne.n	8000e0e <Bootloader_Change_Read_Protection_Level+0x76>
				Host_ROP_Level = 0x55;
 8000e0a:	2355      	movs	r3, #85	; 0x55
 8000e0c:	75fb      	strb	r3, [r7, #23]
			}
			ROP_Level_Status = Change_ROP_Level(Host_ROP_Level);
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fd2c 	bl	800086e <Change_ROP_Level>
 8000e16:	4603      	mov	r3, r0
 8000e18:	73fb      	strb	r3, [r7, #15]
		}
		Bootloader_Send_Data_To_Host((uint8_t *)&ROP_Level_Status, 1);
 8000e1a:	f107 030f 	add.w	r3, r7, #15
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fc11 	bl	8000648 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000e26:	e001      	b.n	8000e2c <Bootloader_Change_Read_Protection_Level+0x94>
		Bootloader_Send_NACK();
 8000e28:	f7ff fbbd 	bl	80005a6 <Bootloader_Send_NACK>
}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <Bootloader_ED_WriteProtection>:
/**
 * Command Format [Command Length, Command Code, SectorNumber, Enable or disable , CRC32[0] , CRC32[1] , CRC32[2] , CRC32[3] ]
 */
static void Bootloader_ED_WriteProtection(uint8_t *Host_Buffer)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
	uint8_t ED_Status = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
	uint8_t SectorNumber = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73bb      	strb	r3, [r7, #14]
	uint8_t WP_Status =CBL_WP_CHANGE_INVALID;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	737b      	strb	r3, [r7, #13]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Enable or Disable write protect on different sectors of the user flash \r\n");
#endif
	/* Extract the CRC32 and Packet length from the host buffer */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	3301      	adds	r3, #1
 8000e58:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t*)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 8000e5a:	8afb      	ldrh	r3, [r7, #22]
 8000e5c:	3b04      	subs	r3, #4
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	613b      	str	r3, [r7, #16]
	/*********** CRC Verification *************/
	if(Bootloader_CRC_Verify(Host_Buffer,Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_PASSED)
 8000e66:	8afb      	ldrh	r3, [r7, #22]
 8000e68:	3b04      	subs	r3, #4
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fba8 	bl	80005c4 <Bootloader_CRC_Verify>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d117      	bne.n	8000eaa <Bootloader_ED_WriteProtection+0x76>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		ED_Status = Host_Buffer[3];
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	78db      	ldrb	r3, [r3, #3]
 8000e7e:	73fb      	strb	r3, [r7, #15]
		SectorNumber = Host_Buffer[2];
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	73bb      	strb	r3, [r7, #14]
		WP_Status = CBL_ED_WriteProtection(ED_Status, SectorNumber);
 8000e86:	7bba      	ldrb	r2, [r7, #14]
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fd48 	bl	8000922 <CBL_ED_WriteProtection>
 8000e92:	4603      	mov	r3, r0
 8000e94:	737b      	strb	r3, [r7, #13]
		Bootloader_Send_ACK(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff fb70 	bl	800057c <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)&WP_Status, 1);
 8000e9c:	f107 030d 	add.w	r3, r7, #13
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fbd0 	bl	8000648 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000ea8:	e001      	b.n	8000eae <Bootloader_ED_WriteProtection+0x7a>
		Bootloader_Send_NACK();
 8000eaa:	f7ff fb7c 	bl	80005a6 <Bootloader_Send_NACK>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <Bootloader_Get_Sector_Protection_Status>:

/**
 * Command Format [Command Length, Command Code, SectorNumber, CRC32[0] , CRC32[1] , CRC32[2] , CRC32[3] ]
 */
static void Bootloader_Get_Sector_Protection_Status(uint8_t *Host_Buffer)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
	uint8_t ED_Status = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73bb      	strb	r3, [r7, #14]
	uint8_t SectorNumber = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read The sector Write protection status \r\n");
#endif
	/* Extract the CRC32 and Packet length from the host buffer */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t*)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 8000ed8:	8afb      	ldrh	r3, [r7, #22]
 8000eda:	3b04      	subs	r3, #4
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	613b      	str	r3, [r7, #16]
	/*********** CRC Verification *************/
	if(Bootloader_CRC_Verify(Host_Buffer,Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_PASSED)
 8000ee4:	8afb      	ldrh	r3, [r7, #22]
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4619      	mov	r1, r3
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff fb69 	bl	80005c4 <Bootloader_CRC_Verify>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d112      	bne.n	8000f1e <Bootloader_Get_Sector_Protection_Status+0x68>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		SectorNumber = Host_Buffer[2];
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	789b      	ldrb	r3, [r3, #2]
 8000efc:	73fb      	strb	r3, [r7, #15]
		ED_Status = CBL_Get_WriteProtection_Status(SectorNumber);
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fd71 	bl	80009e8 <CBL_Get_WriteProtection_Status>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73bb      	strb	r3, [r7, #14]
		Bootloader_Send_ACK(1);
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff fb36 	bl	800057c <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)&ED_Status, 1);
 8000f10:	f107 030e 	add.w	r3, r7, #14
 8000f14:	2101      	movs	r1, #1
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fb96 	bl	8000648 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000f1c:	e001      	b.n	8000f22 <Bootloader_Get_Sector_Protection_Status+0x6c>
		Bootloader_Send_NACK();
 8000f1e:	f7ff fb42 	bl	80005a6 <Bootloader_Send_NACK>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <Bootloader_Jump_To_Main_App>:

static void Bootloader_Jump_To_Main_App(uint8_t *Host_Buffer)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	81fb      	strh	r3, [r7, #14]
	uint32_t Host_CRC32 = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Jump to the Main Application Command \r\n");
#endif
	/* Extract the CRC32 and Packet length from the host buffer */
	Host_CMD_Packet_Len = Host_Buffer[0]+1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((uint32_t*)((Host_Buffer+Host_CMD_Packet_Len)-CRC_TYPE_SIZE_BYTE));
 8000f44:	89fb      	ldrh	r3, [r7, #14]
 8000f46:	3b04      	subs	r3, #4
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	60bb      	str	r3, [r7, #8]

	/*********** CRC Verification *************/
	if(Bootloader_CRC_Verify(Host_Buffer,Host_CMD_Packet_Len - 4, Host_CRC32) == CRC_VERIFICATION_PASSED)
 8000f50:	89fb      	ldrh	r3, [r7, #14]
 8000f52:	3b04      	subs	r3, #4
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fb33 	bl	80005c4 <Bootloader_CRC_Verify>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d105      	bne.n	8000f70 <Bootloader_Jump_To_Main_App+0x46>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(1);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff fb09 	bl	800057c <Bootloader_Send_ACK>
		bootloader_jump_to_user_app();
 8000f6a:	f7ff fc59 	bl	8000820 <bootloader_jump_to_user_app>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000f6e:	e001      	b.n	8000f74 <Bootloader_Jump_To_Main_App+0x4a>
		Bootloader_Send_NACK();
 8000f70:	f7ff fb19 	bl	80005a6 <Bootloader_Send_NACK>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <BL_Print_Message>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
BL_Status BL_Print_Message(char *format , ...)
{
 8000f7c:	b40f      	push	{r0, r1, r2, r3}
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b09c      	sub	sp, #112	; 0x70
 8000f82:	af00      	add	r7, sp, #0
	BL_Status ret = BL_OK;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	char Message[100]={0};
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2260      	movs	r2, #96	; 0x60
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fc48 	bl	800382c <memset>
	va_list args ;
	if(format == NULL)
 8000f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <BL_Print_Message+0x2e>
	{
			ret = BL_NACK; 
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000fa8:	e011      	b.n	8000fce <BL_Print_Message+0x52>
	}
	else
	{ 	
		va_start(args,format);
 8000faa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fae:	607b      	str	r3, [r7, #4]
		vsprintf(Message,format,args);
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fc2d 	bl	8003818 <vsiprintf>
		HAL_UART_Transmit(BL_DEBUG_UART,(uint8_t*)Message,sizeof(Message),HAL_MAX_DELAY);
 8000fbe:	f107 0108 	add.w	r1, r7, #8
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	2264      	movs	r2, #100	; 0x64
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <BL_Print_Message+0x64>)
 8000fca:	f001 fff8 	bl	8002fbe <HAL_UART_Transmit>
		va_end(args);
	}
	return ret;
 8000fce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3770      	adds	r7, #112	; 0x70
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fdc:	b004      	add	sp, #16
 8000fde:	4770      	bx	lr
 8000fe0:	20000158 	.word	0x20000158

08000fe4 <BL_UART_Fetch_Host_Command>:

BL_Status BL_UART_Fetch_Host_Command(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	BL_Status ret = BL_OK;
 8000fea:	2301      	movs	r3, #1
 8000fec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	71bb      	strb	r3, [r7, #6]
	uint8_t Data_Length = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	717b      	strb	r3, [r7, #5]
	memset(BL_Host_Buffer,0,BL_HOST_BUFFER_RX_LENGTH);
 8000ff6:	22c8      	movs	r2, #200	; 0xc8
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4843      	ldr	r0, [pc, #268]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 8000ffc:	f002 fc16 	bl	800382c <memset>
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART,BL_Host_Buffer,1,HAL_MAX_DELAY);
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	2201      	movs	r2, #1
 8001006:	4940      	ldr	r1, [pc, #256]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 8001008:	4840      	ldr	r0, [pc, #256]	; (800110c <BL_UART_Fetch_Host_Command+0x128>)
 800100a:	f002 f86a 	bl	80030e2 <HAL_UART_Receive>
 800100e:	4603      	mov	r3, r0
 8001010:	71bb      	strb	r3, [r7, #6]
	if (HAL_Status != HAL_OK)
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <BL_UART_Fetch_Host_Command+0x3a>
	{
		ret = BL_NACK;	
 8001018:	2300      	movs	r3, #0
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	e06e      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
	}
	else
	{
		Data_Length = BL_Host_Buffer[0];
 800101e:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	717b      	strb	r3, [r7, #5]
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART,&BL_Host_Buffer[1],Data_Length,HAL_MAX_DELAY);
 8001024:	797b      	ldrb	r3, [r7, #5]
 8001026:	b29a      	uxth	r2, r3
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	4938      	ldr	r1, [pc, #224]	; (8001110 <BL_UART_Fetch_Host_Command+0x12c>)
 800102e:	4837      	ldr	r0, [pc, #220]	; (800110c <BL_UART_Fetch_Host_Command+0x128>)
 8001030:	f002 f857 	bl	80030e2 <HAL_UART_Receive>
 8001034:	4603      	mov	r3, r0
 8001036:	71bb      	strb	r3, [r7, #6]
		if (HAL_Status != HAL_OK)
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <BL_UART_Fetch_Host_Command+0x60>
		{
			ret = BL_NACK;	
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e05b      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
		}
		else{
			switch(BL_Host_Buffer[1]){
 8001044:	4b30      	ldr	r3, [pc, #192]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 8001046:	785b      	ldrb	r3, [r3, #1]
 8001048:	3b10      	subs	r3, #16
 800104a:	2b11      	cmp	r3, #17
 800104c:	d852      	bhi.n	80010f4 <BL_UART_Fetch_Host_Command+0x110>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <BL_UART_Fetch_Host_Command+0x70>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	0800109d 	.word	0x0800109d
 8001058:	080010a5 	.word	0x080010a5
 800105c:	080010ad 	.word	0x080010ad
 8001060:	080010b5 	.word	0x080010b5
 8001064:	080010bd 	.word	0x080010bd
 8001068:	080010c5 	.word	0x080010c5
 800106c:	080010cd 	.word	0x080010cd
 8001070:	080010d5 	.word	0x080010d5
 8001074:	080010ed 	.word	0x080010ed
 8001078:	080010dd 	.word	0x080010dd
 800107c:	080010f5 	.word	0x080010f5
 8001080:	080010f5 	.word	0x080010f5
 8001084:	080010f5 	.word	0x080010f5
 8001088:	080010f5 	.word	0x080010f5
 800108c:	080010f5 	.word	0x080010f5
 8001090:	080010f5 	.word	0x080010f5
 8001094:	080010f5 	.word	0x080010f5
 8001098:	080010e5 	.word	0x080010e5
				case CBL_GET_VER_CMD:
					Bootloader_Get_Version(BL_Host_Buffer); 
 800109c:	481a      	ldr	r0, [pc, #104]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 800109e:	f7ff fcbf 	bl	8000a20 <Bootloader_Get_Version>
					break;
 80010a2:	e02b      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
				case CBL_GET_HELP_CMD:
					Bootloader_Get_Help(BL_Host_Buffer);
 80010a4:	4818      	ldr	r0, [pc, #96]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 80010a6:	f7ff fced 	bl	8000a84 <Bootloader_Get_Help>
					break;
 80010aa:	e027      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
				case CBL_GET_CID_CMD:
					Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 80010ae:	f7ff fd17 	bl	8000ae0 <Bootloader_Get_Chip_Identification_Number>
					break;
 80010b2:	e023      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
				case CBL_GET_RDP_STATUS_CMD:
					Bootloader_Read_Protection_Level(BL_Host_Buffer);	 
 80010b4:	4814      	ldr	r0, [pc, #80]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 80010b6:	f7ff fe3c 	bl	8000d32 <Bootloader_Read_Protection_Level>
					break;
 80010ba:	e01f      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
				case CBL_GO_TO_ADDR_CMD:
					Bootloader_Jump_To_Address(BL_Host_Buffer);
 80010bc:	4812      	ldr	r0, [pc, #72]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 80010be:	f7ff fd47 	bl	8000b50 <Bootloader_Jump_To_Address>
					break;
 80010c2:	e01b      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
				case CBL_FLASH_ERASE_CMD:
					Bootloader_Erase_Flash(BL_Host_Buffer);	 
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 80010c6:	f7ff fd8e 	bl	8000be6 <Bootloader_Erase_Flash>
					break;
 80010ca:	e017      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
				case CBL_MEM_WRITE_CMD:
					Bootloader_Memory_Write(BL_Host_Buffer);
 80010cc:	480e      	ldr	r0, [pc, #56]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 80010ce:	f7ff fdcf 	bl	8000c70 <Bootloader_Memory_Write>
					break;
 80010d2:	e013      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
				case CBL_ED_W_PROTECT_CMD:
					Bootloader_ED_WriteProtection(BL_Host_Buffer);
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 80010d6:	f7ff fead 	bl	8000e34 <Bootloader_ED_WriteProtection>
					break;
 80010da:	e00f      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
				case CBL_READ_SECTOR_STATUS_CMD:
					Bootloader_Get_Sector_Protection_Status(BL_Host_Buffer);
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 80010de:	f7ff feea 	bl	8000eb6 <Bootloader_Get_Sector_Protection_Status>
					break;
 80010e2:	e00b      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
				case CBL_CHANGE_ROP_Level_CMD:
					Bootloader_Change_Read_Protection_Level(BL_Host_Buffer);
 80010e4:	4808      	ldr	r0, [pc, #32]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 80010e6:	f7ff fe57 	bl	8000d98 <Bootloader_Change_Read_Protection_Level>
					break;
 80010ea:	e007      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
				case CBL_GO_TO_MAIN_APP_CMD:
					Bootloader_Jump_To_Main_App(BL_Host_Buffer);
 80010ec:	4806      	ldr	r0, [pc, #24]	; (8001108 <BL_UART_Fetch_Host_Command+0x124>)
 80010ee:	f7ff ff1c 	bl	8000f2a <Bootloader_Jump_To_Main_App>
					break;
 80010f2:	e003      	b.n	80010fc <BL_UART_Fetch_Host_Command+0x118>
				default:
					BL_Print_Message("Invalid command code received from host !! \r\n");
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <BL_UART_Fetch_Host_Command+0x130>)
 80010f6:	f7ff ff41 	bl	8000f7c <BL_Print_Message>
					break;
 80010fa:	bf00      	nop
			}
		}
	}
	
	return ret;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000084 	.word	0x20000084
 800110c:	20000158 	.word	0x20000158
 8001110:	20000085 	.word	0x20000085
 8001114:	0800414c 	.word	0x0800414c

08001118 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_CRC_Init+0x20>)
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <MX_CRC_Init+0x24>)
 8001120:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_CRC_Init+0x20>)
 8001124:	f000 fb5d 	bl	80017e2 <HAL_CRC_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800112e:	f000 f8c5 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000014c 	.word	0x2000014c
 800113c:	40023000 	.word	0x40023000

08001140 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0b      	ldr	r2, [pc, #44]	; (800117c <HAL_CRC_MspInit+0x3c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d10d      	bne.n	800116e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_CRC_MspInit+0x40>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a09      	ldr	r2, [pc, #36]	; (8001180 <HAL_CRC_MspInit+0x40>)
 800115c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <HAL_CRC_MspInit+0x40>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023000 	.word	0x40023000
 8001180:	40023800 	.word	0x40023800

08001184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_GPIO_Init+0x4c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <MX_GPIO_Init+0x4c>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_GPIO_Init+0x4c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_GPIO_Init+0x4c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <MX_GPIO_Init+0x4c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_GPIO_Init+0x4c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	BL_Status Status = BL_NACK;
 80011da:	2300      	movs	r3, #0
 80011dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f000 f9a9 	bl	8001534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 f80b 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f7ff ffcd 	bl	8001184 <MX_GPIO_Init>
  MX_CRC_Init();
 80011ea:	f7ff ff95 	bl	8001118 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80011ee:	f000 f905 	bl	80013fc <MX_USART1_UART_Init>

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
		Status = BL_UART_Fetch_Host_Command();
 80011f2:	f7ff fef7 	bl	8000fe4 <BL_UART_Fetch_Host_Command>
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	e7fa      	b.n	80011f2 <main+0x1e>

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	; 0x50
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fb0e 	bl	800382c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <SystemClock_Config+0xb8>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <SystemClock_Config+0xb8>)
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122e:	6413      	str	r3, [r2, #64]	; 0x40
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <SystemClock_Config+0xb8>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <SystemClock_Config+0xbc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <SystemClock_Config+0xbc>)
 800124a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <SystemClock_Config+0xbc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001266:	2300      	movs	r3, #0
 8001268:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	4618      	mov	r0, r3
 8001270:	f001 f932 	bl	80024d8 <HAL_RCC_OscConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800127a:	f000 f81f 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127e:	230f      	movs	r3, #15
 8001280:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001282:	2301      	movs	r3, #1
 8001284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fb94 	bl	80029c8 <HAL_RCC_ClockConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012a6:	f000 f809 	bl	80012bc <Error_Handler>
  }
}
 80012aa:	bf00      	nop
 80012ac:	3750      	adds	r7, #80	; 0x50
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40007000 	.word	0x40007000

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <Error_Handler+0x8>
	...

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <HAL_MspInit+0x4c>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_MspInit+0x4c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_MspInit+0x4c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 f938 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f002 fa4e 	bl	800383c <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20010000 	.word	0x20010000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	20000154 	.word	0x20000154
 80013d4:	20000308 	.word	0x20000308

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART1_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_USART1_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_USART1_UART_Init+0x4c>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART1_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART1_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART1_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART1_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART1_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART1_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART1_UART_Init+0x4c>)
 8001434:	f001 fd76 	bl	8002f24 <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f7ff ff3d 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000158 	.word	0x20000158
 800144c:	40011000 	.word	0x40011000

08001450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_UART_MspInit+0x84>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12c      	bne.n	80014cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_UART_MspInit+0x88>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_UART_MspInit+0x88>)
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_UART_MspInit+0x88>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_UART_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <HAL_UART_MspInit+0x88>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_UART_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014bc:	2307      	movs	r3, #7
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_UART_MspInit+0x8c>)
 80014c8:	f000 fe82 	bl	80021d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40011000 	.word	0x40011000
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000

080014e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014e6:	490e      	ldr	r1, [pc, #56]	; (8001520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014fc:	4c0b      	ldr	r4, [pc, #44]	; (800152c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800150a:	f7ff ff65 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150e:	f002 f99b 	bl	8003848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001512:	f7ff fe5f 	bl	80011d4 <main>
  bx  lr    
 8001516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001518:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001524:	080041d8 	.word	0x080041d8
  ldr r2, =_sbss
 8001528:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800152c:	20000308 	.word	0x20000308

08001530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <HAL_Init+0x40>)
 800153e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_Init+0x40>)
 800154a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_Init+0x40>)
 8001556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155c:	2003      	movs	r0, #3
 800155e:	f000 f90d 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001562:	200f      	movs	r0, #15
 8001564:	f000 f808 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001568:	f7ff feae 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023c00 	.word	0x40023c00

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x54>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x58>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f917 	bl	80017ca <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f000 f8ed 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_InitTick+0x5c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2000000c 	.word	0x2000000c
 80015d0:	20000014 	.word	0x20000014
 80015d4:	20000010 	.word	0x20000010

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000014 	.word	0x20000014
 80015fc:	2000019c 	.word	0x2000019c

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	2000019c 	.word	0x2000019c

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff8e 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff47 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff5c 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff8e 	bl	80016d0 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5d 	bl	800167c <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffb0 	bl	8001738 <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e00e      	b.n	8001812 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	795b      	ldrb	r3, [r3, #5]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fc9b 	bl	8001140 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800181a:	b480      	push	{r7}
 800181c:	b087      	sub	sp, #28
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2202      	movs	r2, #2
 800182e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e00a      	b.n	800184c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	441a      	add	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	d3f0      	bcc.n	8001836 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001862:	693b      	ldr	r3, [r7, #16]
}
 8001864:	4618      	mov	r0, r3
 8001866:	371c      	adds	r7, #28
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <HAL_FLASH_Program+0xa0>)
 8001884:	7e1b      	ldrb	r3, [r3, #24]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_FLASH_Program+0x1e>
 800188a:	2302      	movs	r3, #2
 800188c:	e03b      	b.n	8001906 <HAL_FLASH_Program+0x96>
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_FLASH_Program+0xa0>)
 8001890:	2201      	movs	r2, #1
 8001892:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001894:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001898:	f000 f8b0 	bl	80019fc <FLASH_WaitForLastOperation>
 800189c:	4603      	mov	r3, r0
 800189e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d12b      	bne.n	80018fe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d105      	bne.n	80018b8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80018ac:	783b      	ldrb	r3, [r7, #0]
 80018ae:	4619      	mov	r1, r3
 80018b0:	68b8      	ldr	r0, [r7, #8]
 80018b2:	f000 f95b 	bl	8001b6c <FLASH_Program_Byte>
 80018b6:	e016      	b.n	80018e6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d105      	bne.n	80018ca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80018be:	883b      	ldrh	r3, [r7, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	68b8      	ldr	r0, [r7, #8]
 80018c4:	f000 f92e 	bl	8001b24 <FLASH_Program_HalfWord>
 80018c8:	e00d      	b.n	80018e6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d105      	bne.n	80018dc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4619      	mov	r1, r3
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f000 f903 	bl	8001ae0 <FLASH_Program_Word>
 80018da:	e004      	b.n	80018e6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80018dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018e0:	68b8      	ldr	r0, [r7, #8]
 80018e2:	f000 f8cb 	bl	8001a7c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018ea:	f000 f887 	bl	80019fc <FLASH_WaitForLastOperation>
 80018ee:	4603      	mov	r3, r0
 80018f0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_FLASH_Program+0xa4>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_FLASH_Program+0xa4>)
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_FLASH_Program+0xa0>)
 8001900:	2200      	movs	r2, #0
 8001902:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001904:	7dfb      	ldrb	r3, [r7, #23]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200001a0 	.word	0x200001a0
 8001914:	40023c00 	.word	0x40023c00

08001918 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_FLASH_Unlock+0x38>)
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	da0b      	bge.n	8001942 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_FLASH_Unlock+0x38>)
 800192c:	4a09      	ldr	r2, [pc, #36]	; (8001954 <HAL_FLASH_Unlock+0x3c>)
 800192e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <HAL_FLASH_Unlock+0x38>)
 8001932:	4a09      	ldr	r2, [pc, #36]	; (8001958 <HAL_FLASH_Unlock+0x40>)
 8001934:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_FLASH_Unlock+0x38>)
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b00      	cmp	r3, #0
 800193c:	da01      	bge.n	8001942 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001942:	79fb      	ldrb	r3, [r7, #7]
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40023c00 	.word	0x40023c00
 8001954:	45670123 	.word	0x45670123
 8001958:	cdef89ab 	.word	0xcdef89ab

0800195c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_FLASH_Lock+0x1c>)
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_FLASH_Lock+0x1c>)
 8001966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800196a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40023c00 	.word	0x40023c00

0800197c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_FLASH_OB_Unlock+0x2c>)
 800198e:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_FLASH_OB_Unlock+0x30>)
 8001990:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <HAL_FLASH_OB_Unlock+0x34>)
 8001996:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40023c00 	.word	0x40023c00
 80019ac:	08192a3b 	.word	0x08192a3b
 80019b0:	4c5d6e7f 	.word	0x4c5d6e7f

080019b4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_FLASH_OB_Lock+0x1c>)
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_FLASH_OB_Lock+0x1c>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_FLASH_OB_Launch+0x24>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_FLASH_OB_Launch+0x24>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 80019e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019ec:	f000 f806 	bl	80019fc <FLASH_WaitForLastOperation>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c14 	.word	0x40023c14

080019fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <FLASH_WaitForLastOperation+0x78>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a0e:	f7ff fdf7 	bl	8001600 <HAL_GetTick>
 8001a12:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001a14:	e010      	b.n	8001a38 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d00c      	beq.n	8001a38 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <FLASH_WaitForLastOperation+0x38>
 8001a24:	f7ff fdec 	bl	8001600 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d201      	bcs.n	8001a38 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e019      	b.n	8001a6c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <FLASH_WaitForLastOperation+0x7c>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1e8      	bne.n	8001a16 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <FLASH_WaitForLastOperation+0x7c>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <FLASH_WaitForLastOperation+0x7c>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <FLASH_WaitForLastOperation+0x7c>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001a62:	f000 f8a5 	bl	8001bb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
  
}  
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	200001a0 	.word	0x200001a0
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	4a13      	ldr	r2, [pc, #76]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	4a10      	ldr	r2, [pc, #64]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001a9a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <FLASH_Program_DoubleWord+0x60>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001ab2:	f3bf 8f6f 	isb	sy
}
 8001ab6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	000a      	movs	r2, r1
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	68f9      	ldr	r1, [r7, #12]
 8001aca:	3104      	adds	r1, #4
 8001acc:	4613      	mov	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40023c00 	.word	0x40023c00

08001ae0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001af4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <FLASH_Program_Word+0x40>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	601a      	str	r2, [r3, #0]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <FLASH_Program_HalfWord+0x44>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	801a      	strh	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023c00 	.word	0x40023c00

08001b6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <FLASH_Program_Byte+0x40>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	701a      	strb	r2, [r3, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f043 0310 	orr.w	r3, r3, #16
 8001bc8:	4a2b      	ldr	r2, [pc, #172]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001bca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001bce:	2210      	movs	r2, #16
 8001bd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f043 0308 	orr.w	r3, r3, #8
 8001be6:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001be8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001bec:	2220      	movs	r2, #32
 8001bee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d009      	beq.n	8001c4c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	f043 0320 	orr.w	r3, r3, #32
 8001c60:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <FLASH_SetErrorCode+0xc8>)
 8001c62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <FLASH_SetErrorCode+0xc4>)
 8001c66:	2202      	movs	r2, #2
 8001c68:	60da      	str	r2, [r3, #12]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40023c00 	.word	0x40023c00
 8001c78:	200001a0 	.word	0x200001a0

08001c7c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_FLASHEx_Erase+0xd8>)
 8001c90:	7e1b      	ldrb	r3, [r3, #24]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_FLASHEx_Erase+0x1e>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e058      	b.n	8001d4c <HAL_FLASHEx_Erase+0xd0>
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <HAL_FLASHEx_Erase+0xd8>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ca0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ca4:	f7ff feaa 	bl	80019fc <FLASH_WaitForLastOperation>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d148      	bne.n	8001d44 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d115      	bne.n	8001cee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4610      	mov	r0, r2
 8001cd0:	f000 f8d6 	bl	8001e80 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cd8:	f7ff fe90 	bl	80019fc <FLASH_WaitForLastOperation>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_FLASHEx_Erase+0xdc>)
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <HAL_FLASHEx_Erase+0xdc>)
 8001ce6:	f023 0304 	bic.w	r3, r3, #4
 8001cea:	6113      	str	r3, [r2, #16]
 8001cec:	e028      	b.n	8001d40 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	e01c      	b.n	8001d30 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	68b8      	ldr	r0, [r7, #8]
 8001d00:	f000 f8e2 	bl	8001ec8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d08:	f7ff fe78 	bl	80019fc <FLASH_WaitForLastOperation>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_FLASHEx_Erase+0xdc>)
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_FLASHEx_Erase+0xdc>)
 8001d16:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001d1a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	601a      	str	r2, [r3, #0]
          break;
 8001d28:	e00a      	b.n	8001d40 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4413      	add	r3, r2
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3da      	bcc.n	8001cf6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001d40:	f000 fa00 	bl	8002144 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <HAL_FLASHEx_Erase+0xd8>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	761a      	strb	r2, [r3, #24]

  return status;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200001a0 	.word	0x200001a0
 8001d58:	40023c00 	.word	0x40023c00

08001d5c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d68:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <HAL_FLASHEx_OBProgram+0xd8>)
 8001d6a:	7e1b      	ldrb	r3, [r3, #24]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_FLASHEx_OBProgram+0x18>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e05b      	b.n	8001e2c <HAL_FLASHEx_OBProgram+0xd0>
 8001d74:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <HAL_FLASHEx_OBProgram+0xd8>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d018      	beq.n	8001db8 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d10a      	bne.n	8001da4 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4610      	mov	r0, r2
 8001d9a:	f000 f8dd 	bl	8001f58 <FLASH_OB_EnableWRP>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e009      	b.n	8001db8 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f8f4 	bl	8001f9c <FLASH_OB_DisableWRP>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f906 	bl	8001fdc <FLASH_OB_RDP_LevelConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7e1b      	ldrb	r3, [r3, #24]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8001dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df2:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8001df8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f000 f906 	bl	8002010 <FLASH_OB_UserConfig>
 8001e04:	4603      	mov	r3, r0
 8001e06:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d007      	beq.n	8001e24 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f928 	bl	8002070 <FLASH_OB_BOR_LevelConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_FLASHEx_OBProgram+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200001a0 	.word	0x200001a0

08001e38 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	220f      	movs	r2, #15
 8001e44:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001e46:	f000 f941 	bl	80020cc <FLASH_OB_GetWRP>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001e52:	f000 f947 	bl	80020e4 <FLASH_OB_GetRDP>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001e5e:	f000 f925 	bl	80020ac <FLASH_OB_GetUser>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001e6a:	f000 f95b 	bl	8002124 <FLASH_OB_GetBOR>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	615a      	str	r2, [r3, #20]
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <FLASH_MassErase+0x44>)
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	4a0c      	ldr	r2, [pc, #48]	; (8001ec4 <FLASH_MassErase+0x44>)
 8001e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <FLASH_MassErase+0x44>)
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <FLASH_MassErase+0x44>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <FLASH_MassErase+0x44>)
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	4313      	orrs	r3, r2
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <FLASH_MassErase+0x44>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6113      	str	r3, [r2, #16]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40023c00 	.word	0x40023c00

08001ec8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	e010      	b.n	8001f06 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d103      	bne.n	8001ef2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e009      	b.n	8001f06 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d103      	bne.n	8001f00 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e002      	b.n	8001f06 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001f00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f04:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <FLASH_Erase_Sector+0x8c>)
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <FLASH_Erase_Sector+0x8c>)
 8001f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <FLASH_Erase_Sector+0x8c>)
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	490f      	ldr	r1, [pc, #60]	; (8001f54 <FLASH_Erase_Sector+0x8c>)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <FLASH_Erase_Sector+0x8c>)
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <FLASH_Erase_Sector+0x8c>)
 8001f24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <FLASH_Erase_Sector+0x8c>)
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4313      	orrs	r3, r2
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <FLASH_Erase_Sector+0x8c>)
 8001f36:	f043 0302 	orr.w	r3, r3, #2
 8001f3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <FLASH_Erase_Sector+0x8c>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <FLASH_Erase_Sector+0x8c>)
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	6113      	str	r3, [r2, #16]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40023c00 	.word	0x40023c00

08001f58 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f66:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f6a:	f7ff fd47 	bl	80019fc <FLASH_WaitForLastOperation>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <FLASH_OB_EnableWRP+0x40>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4904      	ldr	r1, [pc, #16]	; (8001f98 <FLASH_OB_EnableWRP+0x40>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023c16 	.word	0x40023c16

08001f9c <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001faa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fae:	f7ff fd25 	bl	80019fc <FLASH_WaitForLastOperation>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d108      	bne.n	8001fce <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <FLASH_OB_DisableWRP+0x3c>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4904      	ldr	r1, [pc, #16]	; (8001fd8 <FLASH_OB_DisableWRP+0x3c>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023c16 	.word	0x40023c16

08001fdc <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fee:	f7ff fd05 	bl	80019fc <FLASH_WaitForLastOperation>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 8001ffc:	4a03      	ldr	r2, [pc, #12]	; (800200c <FLASH_OB_RDP_LevelConfig+0x30>)
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	7013      	strb	r3, [r2, #0]
  }

  return status;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40023c15 	.word	0x40023c15

08002010 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
 800201a:	460b      	mov	r3, r1
 800201c:	71bb      	strb	r3, [r7, #6]
 800201e:	4613      	mov	r3, r2
 8002020:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8002022:	23ff      	movs	r3, #255	; 0xff
 8002024:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800202a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800202e:	f7ff fce5 	bl	80019fc <FLASH_WaitForLastOperation>
 8002032:	4603      	mov	r3, r0
 8002034:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 8002036:	7bbb      	ldrb	r3, [r7, #14]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d111      	bne.n	8002060 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <FLASH_OB_UserConfig+0x5c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 8002048:	79ba      	ldrb	r2, [r7, #6]
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	4313      	orrs	r3, r2
 800204e:	b2da      	uxtb	r2, r3
 8002050:	797b      	ldrb	r3, [r7, #5]
 8002052:	4313      	orrs	r3, r2
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4905      	ldr	r1, [pc, #20]	; (800206c <FLASH_OB_UserConfig+0x5c>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	4313      	orrs	r3, r2
 800205c:	b2db      	uxtb	r3, r3
 800205e:	700b      	strb	r3, [r1, #0]
  }

  return status;
 8002060:	7bbb      	ldrb	r3, [r7, #14]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023c14 	.word	0x40023c14

08002070 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <FLASH_OB_BOR_LevelConfig+0x38>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002082:	f023 030c 	bic.w	r3, r3, #12
 8002086:	b2db      	uxtb	r3, r3
 8002088:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <FLASH_OB_BOR_LevelConfig+0x38>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4905      	ldr	r1, [pc, #20]	; (80020a8 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4313      	orrs	r3, r2
 8002096:	b2db      	uxtb	r3, r3
 8002098:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800209a:	2300      	movs	r3, #0

}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40023c14 	.word	0x40023c14

080020ac <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <FLASH_OB_GetUser+0x1c>)
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	f023 031f 	bic.w	r3, r3, #31
 80020ba:	b2db      	uxtb	r3, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40023c00 	.word	0x40023c00

080020cc <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <FLASH_OB_GetWRP+0x14>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	b29b      	uxth	r3, r3
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40023c16 	.word	0x40023c16

080020e4 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80020ea:	23aa      	movs	r3, #170	; 0xaa
 80020ec:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <FLASH_OB_GetRDP+0x3c>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2bcc      	cmp	r3, #204	; 0xcc
 80020f6:	d102      	bne.n	80020fe <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80020f8:	23cc      	movs	r3, #204	; 0xcc
 80020fa:	71fb      	strb	r3, [r7, #7]
 80020fc:	e009      	b.n	8002112 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <FLASH_OB_GetRDP+0x3c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2baa      	cmp	r3, #170	; 0xaa
 8002106:	d102      	bne.n	800210e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002108:	23aa      	movs	r3, #170	; 0xaa
 800210a:	71fb      	strb	r3, [r7, #7]
 800210c:	e001      	b.n	8002112 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800210e:	2355      	movs	r3, #85	; 0x55
 8002110:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002112:	79fb      	ldrb	r3, [r7, #7]
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40023c15 	.word	0x40023c15

08002124 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <FLASH_OB_GetBOR+0x1c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	b2db      	uxtb	r3, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023c14 	.word	0x40023c14

08002144 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <FLASH_FlushCaches+0x88>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002150:	2b00      	cmp	r3, #0
 8002152:	d017      	beq.n	8002184 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <FLASH_FlushCaches+0x88>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <FLASH_FlushCaches+0x88>)
 800215a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800215e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <FLASH_FlushCaches+0x88>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a19      	ldr	r2, [pc, #100]	; (80021cc <FLASH_FlushCaches+0x88>)
 8002166:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <FLASH_FlushCaches+0x88>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a16      	ldr	r2, [pc, #88]	; (80021cc <FLASH_FlushCaches+0x88>)
 8002172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002176:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <FLASH_FlushCaches+0x88>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a13      	ldr	r2, [pc, #76]	; (80021cc <FLASH_FlushCaches+0x88>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <FLASH_FlushCaches+0x88>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d017      	beq.n	80021c0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <FLASH_FlushCaches+0x88>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <FLASH_FlushCaches+0x88>)
 8002196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800219a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <FLASH_FlushCaches+0x88>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <FLASH_FlushCaches+0x88>)
 80021a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <FLASH_FlushCaches+0x88>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a07      	ldr	r2, [pc, #28]	; (80021cc <FLASH_FlushCaches+0x88>)
 80021ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021b2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <FLASH_FlushCaches+0x88>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <FLASH_FlushCaches+0x88>)
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021be:	6013      	str	r3, [r2, #0]
  }
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40023c00 	.word	0x40023c00

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	e159      	b.n	80024a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	429a      	cmp	r2, r3
 8002206:	f040 8148 	bne.w	800249a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d005      	beq.n	8002222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221e:	2b02      	cmp	r3, #2
 8002220:	d130      	bne.n	8002284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 0201 	and.w	r2, r3, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b03      	cmp	r3, #3
 800228e:	d017      	beq.n	80022c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d123      	bne.n	8002314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a2 	beq.w	800249a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b57      	ldr	r3, [pc, #348]	; (80024b8 <HAL_GPIO_Init+0x2e8>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a56      	ldr	r2, [pc, #344]	; (80024b8 <HAL_GPIO_Init+0x2e8>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b54      	ldr	r3, [pc, #336]	; (80024b8 <HAL_GPIO_Init+0x2e8>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002372:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_GPIO_Init+0x2ec>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a49      	ldr	r2, [pc, #292]	; (80024c0 <HAL_GPIO_Init+0x2f0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x202>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a48      	ldr	r2, [pc, #288]	; (80024c4 <HAL_GPIO_Init+0x2f4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x1fe>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a47      	ldr	r2, [pc, #284]	; (80024c8 <HAL_GPIO_Init+0x2f8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x1fa>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a46      	ldr	r2, [pc, #280]	; (80024cc <HAL_GPIO_Init+0x2fc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x1f6>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a45      	ldr	r2, [pc, #276]	; (80024d0 <HAL_GPIO_Init+0x300>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x1f2>
 80023be:	2304      	movs	r3, #4
 80023c0:	e008      	b.n	80023d4 <HAL_GPIO_Init+0x204>
 80023c2:	2307      	movs	r3, #7
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x204>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e004      	b.n	80023d4 <HAL_GPIO_Init+0x204>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_Init+0x204>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_GPIO_Init+0x204>
 80023d2:	2300      	movs	r3, #0
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f002 0203 	and.w	r2, r2, #3
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	4093      	lsls	r3, r2
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e4:	4935      	ldr	r1, [pc, #212]	; (80024bc <HAL_GPIO_Init+0x2ec>)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	3302      	adds	r3, #2
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f2:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <HAL_GPIO_Init+0x304>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002416:	4a2f      	ldr	r2, [pc, #188]	; (80024d4 <HAL_GPIO_Init+0x304>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_GPIO_Init+0x304>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002440:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <HAL_GPIO_Init+0x304>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <HAL_GPIO_Init+0x304>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <HAL_GPIO_Init+0x304>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_GPIO_Init+0x304>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002494:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_GPIO_Init+0x304>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3301      	adds	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	f67f aea2 	bls.w	80021ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40013800 	.word	0x40013800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40020c00 	.word	0x40020c00
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40013c00 	.word	0x40013c00

080024d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e267      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d075      	beq.n	80025e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024f6:	4b88      	ldr	r3, [pc, #544]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d00c      	beq.n	800251c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002502:	4b85      	ldr	r3, [pc, #532]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800250a:	2b08      	cmp	r3, #8
 800250c:	d112      	bne.n	8002534 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250e:	4b82      	ldr	r3, [pc, #520]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800251a:	d10b      	bne.n	8002534 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	4b7e      	ldr	r3, [pc, #504]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d05b      	beq.n	80025e0 <HAL_RCC_OscConfig+0x108>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d157      	bne.n	80025e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e242      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253c:	d106      	bne.n	800254c <HAL_RCC_OscConfig+0x74>
 800253e:	4b76      	ldr	r3, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a75      	ldr	r2, [pc, #468]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e01d      	b.n	8002588 <HAL_RCC_OscConfig+0xb0>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x98>
 8002556:	4b70      	ldr	r3, [pc, #448]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6f      	ldr	r2, [pc, #444]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 800255c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b6d      	ldr	r3, [pc, #436]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6c      	ldr	r2, [pc, #432]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0xb0>
 8002570:	4b69      	ldr	r3, [pc, #420]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a68      	ldr	r2, [pc, #416]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b66      	ldr	r3, [pc, #408]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a65      	ldr	r2, [pc, #404]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d013      	beq.n	80025b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7ff f836 	bl	8001600 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002598:	f7ff f832 	bl	8001600 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e207      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b5b      	ldr	r3, [pc, #364]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0xc0>
 80025b6:	e014      	b.n	80025e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff f822 	bl	8001600 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff f81e 	bl	8001600 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e1f3      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d2:	4b51      	ldr	r3, [pc, #324]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0xe8>
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d063      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ee:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002602:	2b08      	cmp	r3, #8
 8002604:	d11c      	bne.n	8002640 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002606:	4b44      	ldr	r3, [pc, #272]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d116      	bne.n	8002640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002612:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_RCC_OscConfig+0x152>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e1c7      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262a:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4937      	ldr	r1, [pc, #220]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	e03a      	b.n	80026b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d020      	beq.n	800268a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002648:	4b34      	ldr	r3, [pc, #208]	; (800271c <HAL_RCC_OscConfig+0x244>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe ffd7 	bl	8001600 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002656:	f7fe ffd3 	bl	8001600 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e1a8      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002674:	4b28      	ldr	r3, [pc, #160]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4925      	ldr	r1, [pc, #148]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]
 8002688:	e015      	b.n	80026b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_RCC_OscConfig+0x244>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7fe ffb6 	bl	8001600 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002698:	f7fe ffb2 	bl	8001600 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e187      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d036      	beq.n	8002730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_RCC_OscConfig+0x248>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7fe ff96 	bl	8001600 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d8:	f7fe ff92 	bl	8001600 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e167      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_OscConfig+0x240>)
 80026ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x200>
 80026f6:	e01b      	b.n	8002730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RCC_OscConfig+0x248>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7fe ff7f 	bl	8001600 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	e00e      	b.n	8002724 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002706:	f7fe ff7b 	bl	8001600 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d907      	bls.n	8002724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e150      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
 8002718:	40023800 	.word	0x40023800
 800271c:	42470000 	.word	0x42470000
 8002720:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ea      	bne.n	8002706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8097 	beq.w	800286c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b81      	ldr	r3, [pc, #516]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	4b7d      	ldr	r3, [pc, #500]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a7c      	ldr	r2, [pc, #496]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b7a      	ldr	r3, [pc, #488]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b77      	ldr	r3, [pc, #476]	; (800294c <HAL_RCC_OscConfig+0x474>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277a:	4b74      	ldr	r3, [pc, #464]	; (800294c <HAL_RCC_OscConfig+0x474>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a73      	ldr	r2, [pc, #460]	; (800294c <HAL_RCC_OscConfig+0x474>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7fe ff3b 	bl	8001600 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278e:	f7fe ff37 	bl	8001600 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e10c      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	4b6a      	ldr	r3, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x474>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x2ea>
 80027b4:	4b64      	ldr	r3, [pc, #400]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a63      	ldr	r2, [pc, #396]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	e01c      	b.n	80027fc <HAL_RCC_OscConfig+0x324>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x30c>
 80027ca:	4b5f      	ldr	r3, [pc, #380]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	4a5e      	ldr	r2, [pc, #376]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	6713      	str	r3, [r2, #112]	; 0x70
 80027d6:	4b5c      	ldr	r3, [pc, #368]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	4a5b      	ldr	r2, [pc, #364]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6713      	str	r3, [r2, #112]	; 0x70
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0x324>
 80027e4:	4b58      	ldr	r3, [pc, #352]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a57      	ldr	r2, [pc, #348]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
 80027f0:	4b55      	ldr	r3, [pc, #340]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	4a54      	ldr	r2, [pc, #336]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80027f6:	f023 0304 	bic.w	r3, r3, #4
 80027fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d015      	beq.n	8002830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fefc 	bl	8001600 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fe fef8 	bl	8001600 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e0cb      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002822:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ee      	beq.n	800280c <HAL_RCC_OscConfig+0x334>
 800282e:	e014      	b.n	800285a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7fe fee6 	bl	8001600 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe fee2 	bl	8001600 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0b5      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284e:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ee      	bne.n	8002838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	4a38      	ldr	r2, [pc, #224]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80a1 	beq.w	80029b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002876:	4b34      	ldr	r3, [pc, #208]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	2b08      	cmp	r3, #8
 8002880:	d05c      	beq.n	800293c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d141      	bne.n	800290e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288a:	4b31      	ldr	r3, [pc, #196]	; (8002950 <HAL_RCC_OscConfig+0x478>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe feb6 	bl	8001600 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe feb2 	bl	8001600 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e087      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	019b      	lsls	r3, r3, #6
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	3b01      	subs	r3, #1
 80028d0:	041b      	lsls	r3, r3, #16
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	491b      	ldr	r1, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x478>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fe fe8b 	bl	8001600 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ee:	f7fe fe87 	bl	8001600 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e05c      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x416>
 800290c:	e054      	b.n	80029b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_RCC_OscConfig+0x478>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe fe74 	bl	8001600 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe fe70 	bl	8001600 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e045      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_OscConfig+0x470>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x444>
 800293a:	e03d      	b.n	80029b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d107      	bne.n	8002954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e038      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
 8002948:	40023800 	.word	0x40023800
 800294c:	40007000 	.word	0x40007000
 8002950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_RCC_OscConfig+0x4ec>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d028      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d121      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d11a      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800298a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	3b01      	subs	r3, #1
 800299e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0cc      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b68      	ldr	r3, [pc, #416]	; (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d90c      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b65      	ldr	r3, [pc, #404]	; (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b63      	ldr	r3, [pc, #396]	; (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0b8      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d020      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a1c:	4b59      	ldr	r3, [pc, #356]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a58      	ldr	r2, [pc, #352]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a34:	4b53      	ldr	r3, [pc, #332]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a52      	ldr	r2, [pc, #328]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b50      	ldr	r3, [pc, #320]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	494d      	ldr	r1, [pc, #308]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d044      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d119      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e07f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d003      	beq.n	8002a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e06f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e067      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa6:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4934      	ldr	r1, [pc, #208]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab8:	f7fe fda2 	bl	8001600 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7fe fd9e 	bl	8001600 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e04f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 020c 	and.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1eb      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d20c      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e032      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4916      	ldr	r1, [pc, #88]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	490e      	ldr	r1, [pc, #56]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b4e:	f000 f821 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002b52:	4602      	mov	r2, r0
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	490a      	ldr	r1, [pc, #40]	; (8002b88 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	5ccb      	ldrb	r3, [r1, r3]
 8002b62:	fa22 f303 	lsr.w	r3, r2, r3
 8002b66:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fd02 	bl	8001578 <HAL_InitTick>

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023c00 	.word	0x40023c00
 8002b84:	40023800 	.word	0x40023800
 8002b88:	0800417c 	.word	0x0800417c
 8002b8c:	2000000c 	.word	0x2000000c
 8002b90:	20000010 	.word	0x20000010

08002b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b98:	b090      	sub	sp, #64	; 0x40
 8002b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bac:	4b59      	ldr	r3, [pc, #356]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	f200 80a1 	bhi.w	8002d00 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d003      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x3a>
 8002bc6:	e09b      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc8:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bcc:	e09b      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bce:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bd2:	e098      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd4:	4b4f      	ldr	r3, [pc, #316]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bde:	4b4d      	ldr	r3, [pc, #308]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d028      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bea:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	099b      	lsrs	r3, r3, #6
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	627a      	str	r2, [r7, #36]	; 0x24
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c00:	fb03 f201 	mul.w	r2, r3, r1
 8002c04:	2300      	movs	r3, #0
 8002c06:	fb00 f303 	mul.w	r3, r0, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a43      	ldr	r2, [pc, #268]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c0e:	fba0 1202 	umull	r1, r2, r0, r2
 8002c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c14:	460a      	mov	r2, r1
 8002c16:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c1a:	4413      	add	r3, r2
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c20:	2200      	movs	r2, #0
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	61fa      	str	r2, [r7, #28]
 8002c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c2e:	f7fd fb27 	bl	8000280 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4613      	mov	r3, r2
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c3a:	e053      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3c:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	099b      	lsrs	r3, r3, #6
 8002c42:	2200      	movs	r2, #0
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	617a      	str	r2, [r7, #20]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c4e:	f04f 0b00 	mov.w	fp, #0
 8002c52:	4652      	mov	r2, sl
 8002c54:	465b      	mov	r3, fp
 8002c56:	f04f 0000 	mov.w	r0, #0
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	0159      	lsls	r1, r3, #5
 8002c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c64:	0150      	lsls	r0, r2, #5
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c6e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c86:	ebb2 0408 	subs.w	r4, r2, r8
 8002c8a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	00eb      	lsls	r3, r5, #3
 8002c98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9c:	00e2      	lsls	r2, r4, #3
 8002c9e:	4614      	mov	r4, r2
 8002ca0:	461d      	mov	r5, r3
 8002ca2:	eb14 030a 	adds.w	r3, r4, sl
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	eb45 030b 	adc.w	r3, r5, fp
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cba:	4629      	mov	r1, r5
 8002cbc:	028b      	lsls	r3, r1, #10
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	028a      	lsls	r2, r1, #10
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	60fa      	str	r2, [r7, #12]
 8002cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd8:	f7fd fad2 	bl	8000280 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002cf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3740      	adds	r7, #64	; 0x40
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	00f42400 	.word	0x00f42400
 8002d1c:	017d7840 	.word	0x017d7840

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	2000000c 	.word	0x2000000c

08002d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d3c:	f7ff fff0 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0a9b      	lsrs	r3, r3, #10
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	0800418c 	.word	0x0800418c

08002d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d64:	f7ff ffdc 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0b5b      	lsrs	r3, r3, #13
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	0800418c 	.word	0x0800418c

08002d88 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002d8e:	f7fe fc37 	bl	8001600 <HAL_GetTick>
 8002d92:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d94:	4b5d      	ldr	r3, [pc, #372]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a5c      	ldr	r2, [pc, #368]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fe fc2d 	bl	8001600 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0a7      	b.n	8002f04 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002db4:	4b55      	ldr	r3, [pc, #340]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002dc0:	4b52      	ldr	r3, [pc, #328]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a51      	ldr	r2, [pc, #324]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002dcc:	f7fe fc18 	bl	8001600 <HAL_GetTick>
 8002dd0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002dd2:	4b4e      	ldr	r3, [pc, #312]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dda:	f7fe fc11 	bl	8001600 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e089      	b.n	8002f04 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002df0:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ee      	bne.n	8002dda <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002dfc:	f7fe fc00 	bl	8001600 <HAL_GetTick>
 8002e00:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002e02:	4b42      	ldr	r3, [pc, #264]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a41      	ldr	r2, [pc, #260]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002e08:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe fbf6 	bl	8001600 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e070      	b.n	8002f04 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002e22:	4b3a      	ldr	r3, [pc, #232]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e2e:	f7fe fbe7 	bl	8001600 <HAL_GetTick>
 8002e32:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002e34:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe fbdd 	bl	8001600 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e057      	b.n	8002f04 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002e54:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f0      	bne.n	8002e42 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e60:	f7fe fbce 	bl	8001600 <HAL_GetTick>
 8002e64:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002e66:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002e6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e70:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e74:	f7fe fbc4 	bl	8001600 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e03e      	b.n	8002f04 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002e86:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002e92:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002e94:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <HAL_RCC_DeInit+0x188>)
 8002e96:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002e98:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_RCC_DeInit+0x18c>)
 8002e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a19      	ldr	r2, [pc, #100]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002ea6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002eaa:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002eac:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a16      	ldr	r2, [pc, #88]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eb6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002ebe:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002ec2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ece:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002ed0:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed4:	4a0d      	ldr	r2, [pc, #52]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <HAL_RCC_DeInit+0x184>)
 8002ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_DeInit+0x190>)
 8002eea:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <HAL_RCC_DeInit+0x194>)
 8002eec:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <HAL_RCC_DeInit+0x198>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fb40 	bl	8001578 <HAL_InitTick>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8002f02:	2300      	movs	r3, #0
  }
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	04003010 	.word	0x04003010
 8002f14:	20003000 	.word	0x20003000
 8002f18:	2000000c 	.word	0x2000000c
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	20000010 	.word	0x20000010

08002f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e03f      	b.n	8002fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe fa80 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2224      	movs	r2, #36	; 0x24
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f9cb 	bl	8003304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b08a      	sub	sp, #40	; 0x28
 8002fc2:	af02      	add	r7, sp, #8
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d17c      	bne.n	80030d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_UART_Transmit+0x2c>
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e075      	b.n	80030da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_UART_Transmit+0x3e>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e06e      	b.n	80030da <HAL_UART_Transmit+0x11c>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2221      	movs	r2, #33	; 0x21
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003012:	f7fe faf5 	bl	8001600 <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302c:	d108      	bne.n	8003040 <HAL_UART_Transmit+0x82>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e003      	b.n	8003048 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003050:	e02a      	b.n	80030a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	2180      	movs	r1, #128	; 0x80
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f8e2 	bl	8003226 <UART_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e036      	b.n	80030da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10b      	bne.n	800308a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003080:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	3302      	adds	r3, #2
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	e007      	b.n	800309a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	781a      	ldrb	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3301      	adds	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1cf      	bne.n	8003052 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2200      	movs	r2, #0
 80030ba:	2140      	movs	r1, #64	; 0x40
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f8b2 	bl	8003226 <UART_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e006      	b.n	80030da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e000      	b.n	80030da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
  }
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b08a      	sub	sp, #40	; 0x28
 80030e6:	af02      	add	r7, sp, #8
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	f040 808c 	bne.w	800321c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_UART_Receive+0x2e>
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e084      	b.n	800321e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_UART_Receive+0x40>
 800311e:	2302      	movs	r3, #2
 8003120:	e07d      	b.n	800321e <HAL_UART_Receive+0x13c>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2222      	movs	r2, #34	; 0x22
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800313e:	f7fe fa5f 	bl	8001600 <HAL_GetTick>
 8003142:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	88fa      	ldrh	r2, [r7, #6]
 800314e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003158:	d108      	bne.n	800316c <HAL_UART_Receive+0x8a>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e003      	b.n	8003174 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800317c:	e043      	b.n	8003206 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	2120      	movs	r1, #32
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f84c 	bl	8003226 <UART_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e042      	b.n	800321e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10c      	bne.n	80031b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	3302      	adds	r3, #2
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e01f      	b.n	80031f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c0:	d007      	beq.n	80031d2 <HAL_UART_Receive+0xf0>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_UART_Receive+0xfe>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e008      	b.n	80031f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3301      	adds	r3, #1
 80031f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1b6      	bne.n	800317e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b090      	sub	sp, #64	; 0x40
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003236:	e050      	b.n	80032da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323e:	d04c      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <UART_WaitOnFlagUntilTimeout+0x30>
 8003246:	f7fe f9db 	bl	8001600 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003252:	429a      	cmp	r2, r3
 8003254:	d241      	bcs.n	80032da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800326c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	330c      	adds	r3, #12
 8003274:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003276:	637a      	str	r2, [r7, #52]	; 0x34
 8003278:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800327c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e5      	bne.n	8003256 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	613b      	str	r3, [r7, #16]
   return(result);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3314      	adds	r3, #20
 80032a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032aa:	623a      	str	r2, [r7, #32]
 80032ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	69f9      	ldr	r1, [r7, #28]
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e5      	bne.n	800328a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e00f      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4013      	ands	r3, r2
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d09f      	beq.n	8003238 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3740      	adds	r7, #64	; 0x40
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003308:	b0c0      	sub	sp, #256	; 0x100
 800330a:	af00      	add	r7, sp, #0
 800330c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	68d9      	ldr	r1, [r3, #12]
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	ea40 0301 	orr.w	r3, r0, r1
 800332c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	431a      	orrs	r2, r3
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	431a      	orrs	r2, r3
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800335c:	f021 010c 	bic.w	r1, r1, #12
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800336a:	430b      	orrs	r3, r1
 800336c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	6999      	ldr	r1, [r3, #24]
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	ea40 0301 	orr.w	r3, r0, r1
 800338a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b8f      	ldr	r3, [pc, #572]	; (80035d0 <UART_SetConfig+0x2cc>)
 8003394:	429a      	cmp	r2, r3
 8003396:	d005      	beq.n	80033a4 <UART_SetConfig+0xa0>
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b8d      	ldr	r3, [pc, #564]	; (80035d4 <UART_SetConfig+0x2d0>)
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d104      	bne.n	80033ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033a4:	f7ff fcdc 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 80033a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033ac:	e003      	b.n	80033b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ae:	f7ff fcc3 	bl	8002d38 <HAL_RCC_GetPCLK1Freq>
 80033b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c0:	f040 810c 	bne.w	80035dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033d6:	4622      	mov	r2, r4
 80033d8:	462b      	mov	r3, r5
 80033da:	1891      	adds	r1, r2, r2
 80033dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80033de:	415b      	adcs	r3, r3
 80033e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033e6:	4621      	mov	r1, r4
 80033e8:	eb12 0801 	adds.w	r8, r2, r1
 80033ec:	4629      	mov	r1, r5
 80033ee:	eb43 0901 	adc.w	r9, r3, r1
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003406:	4690      	mov	r8, r2
 8003408:	4699      	mov	r9, r3
 800340a:	4623      	mov	r3, r4
 800340c:	eb18 0303 	adds.w	r3, r8, r3
 8003410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003414:	462b      	mov	r3, r5
 8003416:	eb49 0303 	adc.w	r3, r9, r3
 800341a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800342a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800342e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003432:	460b      	mov	r3, r1
 8003434:	18db      	adds	r3, r3, r3
 8003436:	653b      	str	r3, [r7, #80]	; 0x50
 8003438:	4613      	mov	r3, r2
 800343a:	eb42 0303 	adc.w	r3, r2, r3
 800343e:	657b      	str	r3, [r7, #84]	; 0x54
 8003440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003448:	f7fc ff1a 	bl	8000280 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4b61      	ldr	r3, [pc, #388]	; (80035d8 <UART_SetConfig+0x2d4>)
 8003452:	fba3 2302 	umull	r2, r3, r3, r2
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	011c      	lsls	r4, r3, #4
 800345a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003464:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	64b9      	str	r1, [r7, #72]	; 0x48
 8003474:	415b      	adcs	r3, r3
 8003476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800347c:	4641      	mov	r1, r8
 800347e:	eb12 0a01 	adds.w	sl, r2, r1
 8003482:	4649      	mov	r1, r9
 8003484:	eb43 0b01 	adc.w	fp, r3, r1
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800349c:	4692      	mov	sl, r2
 800349e:	469b      	mov	fp, r3
 80034a0:	4643      	mov	r3, r8
 80034a2:	eb1a 0303 	adds.w	r3, sl, r3
 80034a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034aa:	464b      	mov	r3, r9
 80034ac:	eb4b 0303 	adc.w	r3, fp, r3
 80034b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034c8:	460b      	mov	r3, r1
 80034ca:	18db      	adds	r3, r3, r3
 80034cc:	643b      	str	r3, [r7, #64]	; 0x40
 80034ce:	4613      	mov	r3, r2
 80034d0:	eb42 0303 	adc.w	r3, r2, r3
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
 80034d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034de:	f7fc fecf 	bl	8000280 <__aeabi_uldivmod>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4611      	mov	r1, r2
 80034e8:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <UART_SetConfig+0x2d4>)
 80034ea:	fba3 2301 	umull	r2, r3, r3, r1
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2264      	movs	r2, #100	; 0x64
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	1acb      	subs	r3, r1, r3
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034fe:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <UART_SetConfig+0x2d4>)
 8003500:	fba3 2302 	umull	r2, r3, r3, r2
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800350c:	441c      	add	r4, r3
 800350e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003512:	2200      	movs	r2, #0
 8003514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003518:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800351c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003520:	4642      	mov	r2, r8
 8003522:	464b      	mov	r3, r9
 8003524:	1891      	adds	r1, r2, r2
 8003526:	63b9      	str	r1, [r7, #56]	; 0x38
 8003528:	415b      	adcs	r3, r3
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003530:	4641      	mov	r1, r8
 8003532:	1851      	adds	r1, r2, r1
 8003534:	6339      	str	r1, [r7, #48]	; 0x30
 8003536:	4649      	mov	r1, r9
 8003538:	414b      	adcs	r3, r1
 800353a:	637b      	str	r3, [r7, #52]	; 0x34
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003548:	4659      	mov	r1, fp
 800354a:	00cb      	lsls	r3, r1, #3
 800354c:	4651      	mov	r1, sl
 800354e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003552:	4651      	mov	r1, sl
 8003554:	00ca      	lsls	r2, r1, #3
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	4603      	mov	r3, r0
 800355c:	4642      	mov	r2, r8
 800355e:	189b      	adds	r3, r3, r2
 8003560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003564:	464b      	mov	r3, r9
 8003566:	460a      	mov	r2, r1
 8003568:	eb42 0303 	adc.w	r3, r2, r3
 800356c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800357c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003584:	460b      	mov	r3, r1
 8003586:	18db      	adds	r3, r3, r3
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
 800358a:	4613      	mov	r3, r2
 800358c:	eb42 0303 	adc.w	r3, r2, r3
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800359a:	f7fc fe71 	bl	8000280 <__aeabi_uldivmod>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <UART_SetConfig+0x2d4>)
 80035a4:	fba3 1302 	umull	r1, r3, r3, r2
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	2164      	movs	r1, #100	; 0x64
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	3332      	adds	r3, #50	; 0x32
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <UART_SetConfig+0x2d4>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	f003 0207 	and.w	r2, r3, #7
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4422      	add	r2, r4
 80035ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035cc:	e106      	b.n	80037dc <UART_SetConfig+0x4d8>
 80035ce:	bf00      	nop
 80035d0:	40011000 	.word	0x40011000
 80035d4:	40011400 	.word	0x40011400
 80035d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035ee:	4642      	mov	r2, r8
 80035f0:	464b      	mov	r3, r9
 80035f2:	1891      	adds	r1, r2, r2
 80035f4:	6239      	str	r1, [r7, #32]
 80035f6:	415b      	adcs	r3, r3
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035fe:	4641      	mov	r1, r8
 8003600:	1854      	adds	r4, r2, r1
 8003602:	4649      	mov	r1, r9
 8003604:	eb43 0501 	adc.w	r5, r3, r1
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	00eb      	lsls	r3, r5, #3
 8003612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003616:	00e2      	lsls	r2, r4, #3
 8003618:	4614      	mov	r4, r2
 800361a:	461d      	mov	r5, r3
 800361c:	4643      	mov	r3, r8
 800361e:	18e3      	adds	r3, r4, r3
 8003620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003624:	464b      	mov	r3, r9
 8003626:	eb45 0303 	adc.w	r3, r5, r3
 800362a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800363a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800364a:	4629      	mov	r1, r5
 800364c:	008b      	lsls	r3, r1, #2
 800364e:	4621      	mov	r1, r4
 8003650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003654:	4621      	mov	r1, r4
 8003656:	008a      	lsls	r2, r1, #2
 8003658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800365c:	f7fc fe10 	bl	8000280 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4b60      	ldr	r3, [pc, #384]	; (80037e8 <UART_SetConfig+0x4e4>)
 8003666:	fba3 2302 	umull	r2, r3, r3, r2
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	011c      	lsls	r4, r3, #4
 800366e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003672:	2200      	movs	r2, #0
 8003674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800367c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003680:	4642      	mov	r2, r8
 8003682:	464b      	mov	r3, r9
 8003684:	1891      	adds	r1, r2, r2
 8003686:	61b9      	str	r1, [r7, #24]
 8003688:	415b      	adcs	r3, r3
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003690:	4641      	mov	r1, r8
 8003692:	1851      	adds	r1, r2, r1
 8003694:	6139      	str	r1, [r7, #16]
 8003696:	4649      	mov	r1, r9
 8003698:	414b      	adcs	r3, r1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a8:	4659      	mov	r1, fp
 80036aa:	00cb      	lsls	r3, r1, #3
 80036ac:	4651      	mov	r1, sl
 80036ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036b2:	4651      	mov	r1, sl
 80036b4:	00ca      	lsls	r2, r1, #3
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	4642      	mov	r2, r8
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036c4:	464b      	mov	r3, r9
 80036c6:	460a      	mov	r2, r1
 80036c8:	eb42 0303 	adc.w	r3, r2, r3
 80036cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80036da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036e8:	4649      	mov	r1, r9
 80036ea:	008b      	lsls	r3, r1, #2
 80036ec:	4641      	mov	r1, r8
 80036ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f2:	4641      	mov	r1, r8
 80036f4:	008a      	lsls	r2, r1, #2
 80036f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036fa:	f7fc fdc1 	bl	8000280 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4611      	mov	r1, r2
 8003704:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <UART_SetConfig+0x4e4>)
 8003706:	fba3 2301 	umull	r2, r3, r3, r1
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2264      	movs	r2, #100	; 0x64
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	1acb      	subs	r3, r1, r3
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	3332      	adds	r3, #50	; 0x32
 8003718:	4a33      	ldr	r2, [pc, #204]	; (80037e8 <UART_SetConfig+0x4e4>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003724:	441c      	add	r4, r3
 8003726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800372a:	2200      	movs	r2, #0
 800372c:	673b      	str	r3, [r7, #112]	; 0x70
 800372e:	677a      	str	r2, [r7, #116]	; 0x74
 8003730:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	1891      	adds	r1, r2, r2
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	415b      	adcs	r3, r3
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003744:	4641      	mov	r1, r8
 8003746:	1851      	adds	r1, r2, r1
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	4649      	mov	r1, r9
 800374c:	414b      	adcs	r3, r1
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800375c:	4659      	mov	r1, fp
 800375e:	00cb      	lsls	r3, r1, #3
 8003760:	4651      	mov	r1, sl
 8003762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003766:	4651      	mov	r1, sl
 8003768:	00ca      	lsls	r2, r1, #3
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	4603      	mov	r3, r0
 8003770:	4642      	mov	r2, r8
 8003772:	189b      	adds	r3, r3, r2
 8003774:	66bb      	str	r3, [r7, #104]	; 0x68
 8003776:	464b      	mov	r3, r9
 8003778:	460a      	mov	r2, r1
 800377a:	eb42 0303 	adc.w	r3, r2, r3
 800377e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	663b      	str	r3, [r7, #96]	; 0x60
 800378a:	667a      	str	r2, [r7, #100]	; 0x64
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003798:	4649      	mov	r1, r9
 800379a:	008b      	lsls	r3, r1, #2
 800379c:	4641      	mov	r1, r8
 800379e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037a2:	4641      	mov	r1, r8
 80037a4:	008a      	lsls	r2, r1, #2
 80037a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037aa:	f7fc fd69 	bl	8000280 <__aeabi_uldivmod>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <UART_SetConfig+0x4e4>)
 80037b4:	fba3 1302 	umull	r1, r3, r3, r2
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	2164      	movs	r1, #100	; 0x64
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	3332      	adds	r3, #50	; 0x32
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <UART_SetConfig+0x4e4>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	f003 020f 	and.w	r2, r3, #15
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4422      	add	r2, r4
 80037da:	609a      	str	r2, [r3, #8]
}
 80037dc:	bf00      	nop
 80037de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037e2:	46bd      	mov	sp, r7
 80037e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e8:	51eb851f 	.word	0x51eb851f

080037ec <_vsiprintf_r>:
 80037ec:	b500      	push	{lr}
 80037ee:	b09b      	sub	sp, #108	; 0x6c
 80037f0:	9100      	str	r1, [sp, #0]
 80037f2:	9104      	str	r1, [sp, #16]
 80037f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037f8:	9105      	str	r1, [sp, #20]
 80037fa:	9102      	str	r1, [sp, #8]
 80037fc:	4905      	ldr	r1, [pc, #20]	; (8003814 <_vsiprintf_r+0x28>)
 80037fe:	9103      	str	r1, [sp, #12]
 8003800:	4669      	mov	r1, sp
 8003802:	f000 f999 	bl	8003b38 <_svfiprintf_r>
 8003806:	9b00      	ldr	r3, [sp, #0]
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	b01b      	add	sp, #108	; 0x6c
 800380e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003812:	bf00      	nop
 8003814:	ffff0208 	.word	0xffff0208

08003818 <vsiprintf>:
 8003818:	4613      	mov	r3, r2
 800381a:	460a      	mov	r2, r1
 800381c:	4601      	mov	r1, r0
 800381e:	4802      	ldr	r0, [pc, #8]	; (8003828 <vsiprintf+0x10>)
 8003820:	6800      	ldr	r0, [r0, #0]
 8003822:	f7ff bfe3 	b.w	80037ec <_vsiprintf_r>
 8003826:	bf00      	nop
 8003828:	20000064 	.word	0x20000064

0800382c <memset>:
 800382c:	4402      	add	r2, r0
 800382e:	4603      	mov	r3, r0
 8003830:	4293      	cmp	r3, r2
 8003832:	d100      	bne.n	8003836 <memset+0xa>
 8003834:	4770      	bx	lr
 8003836:	f803 1b01 	strb.w	r1, [r3], #1
 800383a:	e7f9      	b.n	8003830 <memset+0x4>

0800383c <__errno>:
 800383c:	4b01      	ldr	r3, [pc, #4]	; (8003844 <__errno+0x8>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000064 	.word	0x20000064

08003848 <__libc_init_array>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4d0d      	ldr	r5, [pc, #52]	; (8003880 <__libc_init_array+0x38>)
 800384c:	4c0d      	ldr	r4, [pc, #52]	; (8003884 <__libc_init_array+0x3c>)
 800384e:	1b64      	subs	r4, r4, r5
 8003850:	10a4      	asrs	r4, r4, #2
 8003852:	2600      	movs	r6, #0
 8003854:	42a6      	cmp	r6, r4
 8003856:	d109      	bne.n	800386c <__libc_init_array+0x24>
 8003858:	4d0b      	ldr	r5, [pc, #44]	; (8003888 <__libc_init_array+0x40>)
 800385a:	4c0c      	ldr	r4, [pc, #48]	; (800388c <__libc_init_array+0x44>)
 800385c:	f000 fc6a 	bl	8004134 <_init>
 8003860:	1b64      	subs	r4, r4, r5
 8003862:	10a4      	asrs	r4, r4, #2
 8003864:	2600      	movs	r6, #0
 8003866:	42a6      	cmp	r6, r4
 8003868:	d105      	bne.n	8003876 <__libc_init_array+0x2e>
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003870:	4798      	blx	r3
 8003872:	3601      	adds	r6, #1
 8003874:	e7ee      	b.n	8003854 <__libc_init_array+0xc>
 8003876:	f855 3b04 	ldr.w	r3, [r5], #4
 800387a:	4798      	blx	r3
 800387c:	3601      	adds	r6, #1
 800387e:	e7f2      	b.n	8003866 <__libc_init_array+0x1e>
 8003880:	080041d0 	.word	0x080041d0
 8003884:	080041d0 	.word	0x080041d0
 8003888:	080041d0 	.word	0x080041d0
 800388c:	080041d4 	.word	0x080041d4

08003890 <__retarget_lock_acquire_recursive>:
 8003890:	4770      	bx	lr

08003892 <__retarget_lock_release_recursive>:
 8003892:	4770      	bx	lr

08003894 <_free_r>:
 8003894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003896:	2900      	cmp	r1, #0
 8003898:	d044      	beq.n	8003924 <_free_r+0x90>
 800389a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800389e:	9001      	str	r0, [sp, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f1a1 0404 	sub.w	r4, r1, #4
 80038a6:	bfb8      	it	lt
 80038a8:	18e4      	addlt	r4, r4, r3
 80038aa:	f000 f8df 	bl	8003a6c <__malloc_lock>
 80038ae:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <_free_r+0x94>)
 80038b0:	9801      	ldr	r0, [sp, #4]
 80038b2:	6813      	ldr	r3, [r2, #0]
 80038b4:	b933      	cbnz	r3, 80038c4 <_free_r+0x30>
 80038b6:	6063      	str	r3, [r4, #4]
 80038b8:	6014      	str	r4, [r2, #0]
 80038ba:	b003      	add	sp, #12
 80038bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038c0:	f000 b8da 	b.w	8003a78 <__malloc_unlock>
 80038c4:	42a3      	cmp	r3, r4
 80038c6:	d908      	bls.n	80038da <_free_r+0x46>
 80038c8:	6825      	ldr	r5, [r4, #0]
 80038ca:	1961      	adds	r1, r4, r5
 80038cc:	428b      	cmp	r3, r1
 80038ce:	bf01      	itttt	eq
 80038d0:	6819      	ldreq	r1, [r3, #0]
 80038d2:	685b      	ldreq	r3, [r3, #4]
 80038d4:	1949      	addeq	r1, r1, r5
 80038d6:	6021      	streq	r1, [r4, #0]
 80038d8:	e7ed      	b.n	80038b6 <_free_r+0x22>
 80038da:	461a      	mov	r2, r3
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	b10b      	cbz	r3, 80038e4 <_free_r+0x50>
 80038e0:	42a3      	cmp	r3, r4
 80038e2:	d9fa      	bls.n	80038da <_free_r+0x46>
 80038e4:	6811      	ldr	r1, [r2, #0]
 80038e6:	1855      	adds	r5, r2, r1
 80038e8:	42a5      	cmp	r5, r4
 80038ea:	d10b      	bne.n	8003904 <_free_r+0x70>
 80038ec:	6824      	ldr	r4, [r4, #0]
 80038ee:	4421      	add	r1, r4
 80038f0:	1854      	adds	r4, r2, r1
 80038f2:	42a3      	cmp	r3, r4
 80038f4:	6011      	str	r1, [r2, #0]
 80038f6:	d1e0      	bne.n	80038ba <_free_r+0x26>
 80038f8:	681c      	ldr	r4, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	6053      	str	r3, [r2, #4]
 80038fe:	440c      	add	r4, r1
 8003900:	6014      	str	r4, [r2, #0]
 8003902:	e7da      	b.n	80038ba <_free_r+0x26>
 8003904:	d902      	bls.n	800390c <_free_r+0x78>
 8003906:	230c      	movs	r3, #12
 8003908:	6003      	str	r3, [r0, #0]
 800390a:	e7d6      	b.n	80038ba <_free_r+0x26>
 800390c:	6825      	ldr	r5, [r4, #0]
 800390e:	1961      	adds	r1, r4, r5
 8003910:	428b      	cmp	r3, r1
 8003912:	bf04      	itt	eq
 8003914:	6819      	ldreq	r1, [r3, #0]
 8003916:	685b      	ldreq	r3, [r3, #4]
 8003918:	6063      	str	r3, [r4, #4]
 800391a:	bf04      	itt	eq
 800391c:	1949      	addeq	r1, r1, r5
 800391e:	6021      	streq	r1, [r4, #0]
 8003920:	6054      	str	r4, [r2, #4]
 8003922:	e7ca      	b.n	80038ba <_free_r+0x26>
 8003924:	b003      	add	sp, #12
 8003926:	bd30      	pop	{r4, r5, pc}
 8003928:	20000300 	.word	0x20000300

0800392c <sbrk_aligned>:
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	4e0e      	ldr	r6, [pc, #56]	; (8003968 <sbrk_aligned+0x3c>)
 8003930:	460c      	mov	r4, r1
 8003932:	6831      	ldr	r1, [r6, #0]
 8003934:	4605      	mov	r5, r0
 8003936:	b911      	cbnz	r1, 800393e <sbrk_aligned+0x12>
 8003938:	f000 fba6 	bl	8004088 <_sbrk_r>
 800393c:	6030      	str	r0, [r6, #0]
 800393e:	4621      	mov	r1, r4
 8003940:	4628      	mov	r0, r5
 8003942:	f000 fba1 	bl	8004088 <_sbrk_r>
 8003946:	1c43      	adds	r3, r0, #1
 8003948:	d00a      	beq.n	8003960 <sbrk_aligned+0x34>
 800394a:	1cc4      	adds	r4, r0, #3
 800394c:	f024 0403 	bic.w	r4, r4, #3
 8003950:	42a0      	cmp	r0, r4
 8003952:	d007      	beq.n	8003964 <sbrk_aligned+0x38>
 8003954:	1a21      	subs	r1, r4, r0
 8003956:	4628      	mov	r0, r5
 8003958:	f000 fb96 	bl	8004088 <_sbrk_r>
 800395c:	3001      	adds	r0, #1
 800395e:	d101      	bne.n	8003964 <sbrk_aligned+0x38>
 8003960:	f04f 34ff 	mov.w	r4, #4294967295
 8003964:	4620      	mov	r0, r4
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	20000304 	.word	0x20000304

0800396c <_malloc_r>:
 800396c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003970:	1ccd      	adds	r5, r1, #3
 8003972:	f025 0503 	bic.w	r5, r5, #3
 8003976:	3508      	adds	r5, #8
 8003978:	2d0c      	cmp	r5, #12
 800397a:	bf38      	it	cc
 800397c:	250c      	movcc	r5, #12
 800397e:	2d00      	cmp	r5, #0
 8003980:	4607      	mov	r7, r0
 8003982:	db01      	blt.n	8003988 <_malloc_r+0x1c>
 8003984:	42a9      	cmp	r1, r5
 8003986:	d905      	bls.n	8003994 <_malloc_r+0x28>
 8003988:	230c      	movs	r3, #12
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	2600      	movs	r6, #0
 800398e:	4630      	mov	r0, r6
 8003990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003994:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a68 <_malloc_r+0xfc>
 8003998:	f000 f868 	bl	8003a6c <__malloc_lock>
 800399c:	f8d8 3000 	ldr.w	r3, [r8]
 80039a0:	461c      	mov	r4, r3
 80039a2:	bb5c      	cbnz	r4, 80039fc <_malloc_r+0x90>
 80039a4:	4629      	mov	r1, r5
 80039a6:	4638      	mov	r0, r7
 80039a8:	f7ff ffc0 	bl	800392c <sbrk_aligned>
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	4604      	mov	r4, r0
 80039b0:	d155      	bne.n	8003a5e <_malloc_r+0xf2>
 80039b2:	f8d8 4000 	ldr.w	r4, [r8]
 80039b6:	4626      	mov	r6, r4
 80039b8:	2e00      	cmp	r6, #0
 80039ba:	d145      	bne.n	8003a48 <_malloc_r+0xdc>
 80039bc:	2c00      	cmp	r4, #0
 80039be:	d048      	beq.n	8003a52 <_malloc_r+0xe6>
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	4631      	mov	r1, r6
 80039c4:	4638      	mov	r0, r7
 80039c6:	eb04 0903 	add.w	r9, r4, r3
 80039ca:	f000 fb5d 	bl	8004088 <_sbrk_r>
 80039ce:	4581      	cmp	r9, r0
 80039d0:	d13f      	bne.n	8003a52 <_malloc_r+0xe6>
 80039d2:	6821      	ldr	r1, [r4, #0]
 80039d4:	1a6d      	subs	r5, r5, r1
 80039d6:	4629      	mov	r1, r5
 80039d8:	4638      	mov	r0, r7
 80039da:	f7ff ffa7 	bl	800392c <sbrk_aligned>
 80039de:	3001      	adds	r0, #1
 80039e0:	d037      	beq.n	8003a52 <_malloc_r+0xe6>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	442b      	add	r3, r5
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	f8d8 3000 	ldr.w	r3, [r8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d038      	beq.n	8003a62 <_malloc_r+0xf6>
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	42a2      	cmp	r2, r4
 80039f4:	d12b      	bne.n	8003a4e <_malloc_r+0xe2>
 80039f6:	2200      	movs	r2, #0
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	e00f      	b.n	8003a1c <_malloc_r+0xb0>
 80039fc:	6822      	ldr	r2, [r4, #0]
 80039fe:	1b52      	subs	r2, r2, r5
 8003a00:	d41f      	bmi.n	8003a42 <_malloc_r+0xd6>
 8003a02:	2a0b      	cmp	r2, #11
 8003a04:	d917      	bls.n	8003a36 <_malloc_r+0xca>
 8003a06:	1961      	adds	r1, r4, r5
 8003a08:	42a3      	cmp	r3, r4
 8003a0a:	6025      	str	r5, [r4, #0]
 8003a0c:	bf18      	it	ne
 8003a0e:	6059      	strne	r1, [r3, #4]
 8003a10:	6863      	ldr	r3, [r4, #4]
 8003a12:	bf08      	it	eq
 8003a14:	f8c8 1000 	streq.w	r1, [r8]
 8003a18:	5162      	str	r2, [r4, r5]
 8003a1a:	604b      	str	r3, [r1, #4]
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	f104 060b 	add.w	r6, r4, #11
 8003a22:	f000 f829 	bl	8003a78 <__malloc_unlock>
 8003a26:	f026 0607 	bic.w	r6, r6, #7
 8003a2a:	1d23      	adds	r3, r4, #4
 8003a2c:	1af2      	subs	r2, r6, r3
 8003a2e:	d0ae      	beq.n	800398e <_malloc_r+0x22>
 8003a30:	1b9b      	subs	r3, r3, r6
 8003a32:	50a3      	str	r3, [r4, r2]
 8003a34:	e7ab      	b.n	800398e <_malloc_r+0x22>
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	6862      	ldr	r2, [r4, #4]
 8003a3a:	d1dd      	bne.n	80039f8 <_malloc_r+0x8c>
 8003a3c:	f8c8 2000 	str.w	r2, [r8]
 8003a40:	e7ec      	b.n	8003a1c <_malloc_r+0xb0>
 8003a42:	4623      	mov	r3, r4
 8003a44:	6864      	ldr	r4, [r4, #4]
 8003a46:	e7ac      	b.n	80039a2 <_malloc_r+0x36>
 8003a48:	4634      	mov	r4, r6
 8003a4a:	6876      	ldr	r6, [r6, #4]
 8003a4c:	e7b4      	b.n	80039b8 <_malloc_r+0x4c>
 8003a4e:	4613      	mov	r3, r2
 8003a50:	e7cc      	b.n	80039ec <_malloc_r+0x80>
 8003a52:	230c      	movs	r3, #12
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	4638      	mov	r0, r7
 8003a58:	f000 f80e 	bl	8003a78 <__malloc_unlock>
 8003a5c:	e797      	b.n	800398e <_malloc_r+0x22>
 8003a5e:	6025      	str	r5, [r4, #0]
 8003a60:	e7dc      	b.n	8003a1c <_malloc_r+0xb0>
 8003a62:	605b      	str	r3, [r3, #4]
 8003a64:	deff      	udf	#255	; 0xff
 8003a66:	bf00      	nop
 8003a68:	20000300 	.word	0x20000300

08003a6c <__malloc_lock>:
 8003a6c:	4801      	ldr	r0, [pc, #4]	; (8003a74 <__malloc_lock+0x8>)
 8003a6e:	f7ff bf0f 	b.w	8003890 <__retarget_lock_acquire_recursive>
 8003a72:	bf00      	nop
 8003a74:	200002fc 	.word	0x200002fc

08003a78 <__malloc_unlock>:
 8003a78:	4801      	ldr	r0, [pc, #4]	; (8003a80 <__malloc_unlock+0x8>)
 8003a7a:	f7ff bf0a 	b.w	8003892 <__retarget_lock_release_recursive>
 8003a7e:	bf00      	nop
 8003a80:	200002fc 	.word	0x200002fc

08003a84 <__ssputs_r>:
 8003a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a88:	688e      	ldr	r6, [r1, #8]
 8003a8a:	461f      	mov	r7, r3
 8003a8c:	42be      	cmp	r6, r7
 8003a8e:	680b      	ldr	r3, [r1, #0]
 8003a90:	4682      	mov	sl, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	4690      	mov	r8, r2
 8003a96:	d82c      	bhi.n	8003af2 <__ssputs_r+0x6e>
 8003a98:	898a      	ldrh	r2, [r1, #12]
 8003a9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a9e:	d026      	beq.n	8003aee <__ssputs_r+0x6a>
 8003aa0:	6965      	ldr	r5, [r4, #20]
 8003aa2:	6909      	ldr	r1, [r1, #16]
 8003aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aa8:	eba3 0901 	sub.w	r9, r3, r1
 8003aac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ab0:	1c7b      	adds	r3, r7, #1
 8003ab2:	444b      	add	r3, r9
 8003ab4:	106d      	asrs	r5, r5, #1
 8003ab6:	429d      	cmp	r5, r3
 8003ab8:	bf38      	it	cc
 8003aba:	461d      	movcc	r5, r3
 8003abc:	0553      	lsls	r3, r2, #21
 8003abe:	d527      	bpl.n	8003b10 <__ssputs_r+0x8c>
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	f7ff ff53 	bl	800396c <_malloc_r>
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	b360      	cbz	r0, 8003b24 <__ssputs_r+0xa0>
 8003aca:	6921      	ldr	r1, [r4, #16]
 8003acc:	464a      	mov	r2, r9
 8003ace:	f000 faeb 	bl	80040a8 <memcpy>
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	6126      	str	r6, [r4, #16]
 8003ae0:	6165      	str	r5, [r4, #20]
 8003ae2:	444e      	add	r6, r9
 8003ae4:	eba5 0509 	sub.w	r5, r5, r9
 8003ae8:	6026      	str	r6, [r4, #0]
 8003aea:	60a5      	str	r5, [r4, #8]
 8003aec:	463e      	mov	r6, r7
 8003aee:	42be      	cmp	r6, r7
 8003af0:	d900      	bls.n	8003af4 <__ssputs_r+0x70>
 8003af2:	463e      	mov	r6, r7
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	4632      	mov	r2, r6
 8003af8:	4641      	mov	r1, r8
 8003afa:	f000 faab 	bl	8004054 <memmove>
 8003afe:	68a3      	ldr	r3, [r4, #8]
 8003b00:	1b9b      	subs	r3, r3, r6
 8003b02:	60a3      	str	r3, [r4, #8]
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	4433      	add	r3, r6
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b10:	462a      	mov	r2, r5
 8003b12:	f000 fad7 	bl	80040c4 <_realloc_r>
 8003b16:	4606      	mov	r6, r0
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	d1e0      	bne.n	8003ade <__ssputs_r+0x5a>
 8003b1c:	6921      	ldr	r1, [r4, #16]
 8003b1e:	4650      	mov	r0, sl
 8003b20:	f7ff feb8 	bl	8003894 <_free_r>
 8003b24:	230c      	movs	r3, #12
 8003b26:	f8ca 3000 	str.w	r3, [sl]
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	f04f 30ff 	mov.w	r0, #4294967295
 8003b36:	e7e9      	b.n	8003b0c <__ssputs_r+0x88>

08003b38 <_svfiprintf_r>:
 8003b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3c:	4698      	mov	r8, r3
 8003b3e:	898b      	ldrh	r3, [r1, #12]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	b09d      	sub	sp, #116	; 0x74
 8003b44:	4607      	mov	r7, r0
 8003b46:	460d      	mov	r5, r1
 8003b48:	4614      	mov	r4, r2
 8003b4a:	d50e      	bpl.n	8003b6a <_svfiprintf_r+0x32>
 8003b4c:	690b      	ldr	r3, [r1, #16]
 8003b4e:	b963      	cbnz	r3, 8003b6a <_svfiprintf_r+0x32>
 8003b50:	2140      	movs	r1, #64	; 0x40
 8003b52:	f7ff ff0b 	bl	800396c <_malloc_r>
 8003b56:	6028      	str	r0, [r5, #0]
 8003b58:	6128      	str	r0, [r5, #16]
 8003b5a:	b920      	cbnz	r0, 8003b66 <_svfiprintf_r+0x2e>
 8003b5c:	230c      	movs	r3, #12
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	e0d0      	b.n	8003d08 <_svfiprintf_r+0x1d0>
 8003b66:	2340      	movs	r3, #64	; 0x40
 8003b68:	616b      	str	r3, [r5, #20]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6e:	2320      	movs	r3, #32
 8003b70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b78:	2330      	movs	r3, #48	; 0x30
 8003b7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d20 <_svfiprintf_r+0x1e8>
 8003b7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b82:	f04f 0901 	mov.w	r9, #1
 8003b86:	4623      	mov	r3, r4
 8003b88:	469a      	mov	sl, r3
 8003b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b8e:	b10a      	cbz	r2, 8003b94 <_svfiprintf_r+0x5c>
 8003b90:	2a25      	cmp	r2, #37	; 0x25
 8003b92:	d1f9      	bne.n	8003b88 <_svfiprintf_r+0x50>
 8003b94:	ebba 0b04 	subs.w	fp, sl, r4
 8003b98:	d00b      	beq.n	8003bb2 <_svfiprintf_r+0x7a>
 8003b9a:	465b      	mov	r3, fp
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	f7ff ff6f 	bl	8003a84 <__ssputs_r>
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	f000 80a9 	beq.w	8003cfe <_svfiprintf_r+0x1c6>
 8003bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bae:	445a      	add	r2, fp
 8003bb0:	9209      	str	r2, [sp, #36]	; 0x24
 8003bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80a1 	beq.w	8003cfe <_svfiprintf_r+0x1c6>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bc6:	f10a 0a01 	add.w	sl, sl, #1
 8003bca:	9304      	str	r3, [sp, #16]
 8003bcc:	9307      	str	r3, [sp, #28]
 8003bce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bd2:	931a      	str	r3, [sp, #104]	; 0x68
 8003bd4:	4654      	mov	r4, sl
 8003bd6:	2205      	movs	r2, #5
 8003bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bdc:	4850      	ldr	r0, [pc, #320]	; (8003d20 <_svfiprintf_r+0x1e8>)
 8003bde:	f7fc faff 	bl	80001e0 <memchr>
 8003be2:	9a04      	ldr	r2, [sp, #16]
 8003be4:	b9d8      	cbnz	r0, 8003c1e <_svfiprintf_r+0xe6>
 8003be6:	06d0      	lsls	r0, r2, #27
 8003be8:	bf44      	itt	mi
 8003bea:	2320      	movmi	r3, #32
 8003bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bf0:	0711      	lsls	r1, r2, #28
 8003bf2:	bf44      	itt	mi
 8003bf4:	232b      	movmi	r3, #43	; 0x2b
 8003bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8003bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8003c00:	d015      	beq.n	8003c2e <_svfiprintf_r+0xf6>
 8003c02:	9a07      	ldr	r2, [sp, #28]
 8003c04:	4654      	mov	r4, sl
 8003c06:	2000      	movs	r0, #0
 8003c08:	f04f 0c0a 	mov.w	ip, #10
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c12:	3b30      	subs	r3, #48	; 0x30
 8003c14:	2b09      	cmp	r3, #9
 8003c16:	d94d      	bls.n	8003cb4 <_svfiprintf_r+0x17c>
 8003c18:	b1b0      	cbz	r0, 8003c48 <_svfiprintf_r+0x110>
 8003c1a:	9207      	str	r2, [sp, #28]
 8003c1c:	e014      	b.n	8003c48 <_svfiprintf_r+0x110>
 8003c1e:	eba0 0308 	sub.w	r3, r0, r8
 8003c22:	fa09 f303 	lsl.w	r3, r9, r3
 8003c26:	4313      	orrs	r3, r2
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	46a2      	mov	sl, r4
 8003c2c:	e7d2      	b.n	8003bd4 <_svfiprintf_r+0x9c>
 8003c2e:	9b03      	ldr	r3, [sp, #12]
 8003c30:	1d19      	adds	r1, r3, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	9103      	str	r1, [sp, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bfbb      	ittet	lt
 8003c3a:	425b      	neglt	r3, r3
 8003c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8003c40:	9307      	strge	r3, [sp, #28]
 8003c42:	9307      	strlt	r3, [sp, #28]
 8003c44:	bfb8      	it	lt
 8003c46:	9204      	strlt	r2, [sp, #16]
 8003c48:	7823      	ldrb	r3, [r4, #0]
 8003c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8003c4c:	d10c      	bne.n	8003c68 <_svfiprintf_r+0x130>
 8003c4e:	7863      	ldrb	r3, [r4, #1]
 8003c50:	2b2a      	cmp	r3, #42	; 0x2a
 8003c52:	d134      	bne.n	8003cbe <_svfiprintf_r+0x186>
 8003c54:	9b03      	ldr	r3, [sp, #12]
 8003c56:	1d1a      	adds	r2, r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	9203      	str	r2, [sp, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bfb8      	it	lt
 8003c60:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c64:	3402      	adds	r4, #2
 8003c66:	9305      	str	r3, [sp, #20]
 8003c68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003d30 <_svfiprintf_r+0x1f8>
 8003c6c:	7821      	ldrb	r1, [r4, #0]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	4650      	mov	r0, sl
 8003c72:	f7fc fab5 	bl	80001e0 <memchr>
 8003c76:	b138      	cbz	r0, 8003c88 <_svfiprintf_r+0x150>
 8003c78:	9b04      	ldr	r3, [sp, #16]
 8003c7a:	eba0 000a 	sub.w	r0, r0, sl
 8003c7e:	2240      	movs	r2, #64	; 0x40
 8003c80:	4082      	lsls	r2, r0
 8003c82:	4313      	orrs	r3, r2
 8003c84:	3401      	adds	r4, #1
 8003c86:	9304      	str	r3, [sp, #16]
 8003c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c8c:	4825      	ldr	r0, [pc, #148]	; (8003d24 <_svfiprintf_r+0x1ec>)
 8003c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c92:	2206      	movs	r2, #6
 8003c94:	f7fc faa4 	bl	80001e0 <memchr>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d038      	beq.n	8003d0e <_svfiprintf_r+0x1d6>
 8003c9c:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <_svfiprintf_r+0x1f0>)
 8003c9e:	bb1b      	cbnz	r3, 8003ce8 <_svfiprintf_r+0x1b0>
 8003ca0:	9b03      	ldr	r3, [sp, #12]
 8003ca2:	3307      	adds	r3, #7
 8003ca4:	f023 0307 	bic.w	r3, r3, #7
 8003ca8:	3308      	adds	r3, #8
 8003caa:	9303      	str	r3, [sp, #12]
 8003cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cae:	4433      	add	r3, r6
 8003cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb2:	e768      	b.n	8003b86 <_svfiprintf_r+0x4e>
 8003cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb8:	460c      	mov	r4, r1
 8003cba:	2001      	movs	r0, #1
 8003cbc:	e7a6      	b.n	8003c0c <_svfiprintf_r+0xd4>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	3401      	adds	r4, #1
 8003cc2:	9305      	str	r3, [sp, #20]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f04f 0c0a 	mov.w	ip, #10
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cd0:	3a30      	subs	r2, #48	; 0x30
 8003cd2:	2a09      	cmp	r2, #9
 8003cd4:	d903      	bls.n	8003cde <_svfiprintf_r+0x1a6>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0c6      	beq.n	8003c68 <_svfiprintf_r+0x130>
 8003cda:	9105      	str	r1, [sp, #20]
 8003cdc:	e7c4      	b.n	8003c68 <_svfiprintf_r+0x130>
 8003cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e7f0      	b.n	8003cca <_svfiprintf_r+0x192>
 8003ce8:	ab03      	add	r3, sp, #12
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	462a      	mov	r2, r5
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <_svfiprintf_r+0x1f4>)
 8003cf0:	a904      	add	r1, sp, #16
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	f3af 8000 	nop.w
 8003cf8:	1c42      	adds	r2, r0, #1
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	d1d6      	bne.n	8003cac <_svfiprintf_r+0x174>
 8003cfe:	89ab      	ldrh	r3, [r5, #12]
 8003d00:	065b      	lsls	r3, r3, #25
 8003d02:	f53f af2d 	bmi.w	8003b60 <_svfiprintf_r+0x28>
 8003d06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d08:	b01d      	add	sp, #116	; 0x74
 8003d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d0e:	ab03      	add	r3, sp, #12
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	462a      	mov	r2, r5
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <_svfiprintf_r+0x1f4>)
 8003d16:	a904      	add	r1, sp, #16
 8003d18:	4638      	mov	r0, r7
 8003d1a:	f000 f879 	bl	8003e10 <_printf_i>
 8003d1e:	e7eb      	b.n	8003cf8 <_svfiprintf_r+0x1c0>
 8003d20:	08004194 	.word	0x08004194
 8003d24:	0800419e 	.word	0x0800419e
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	08003a85 	.word	0x08003a85
 8003d30:	0800419a 	.word	0x0800419a

08003d34 <_printf_common>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	4616      	mov	r6, r2
 8003d3a:	4699      	mov	r9, r3
 8003d3c:	688a      	ldr	r2, [r1, #8]
 8003d3e:	690b      	ldr	r3, [r1, #16]
 8003d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d44:	4293      	cmp	r3, r2
 8003d46:	bfb8      	it	lt
 8003d48:	4613      	movlt	r3, r2
 8003d4a:	6033      	str	r3, [r6, #0]
 8003d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d50:	4607      	mov	r7, r0
 8003d52:	460c      	mov	r4, r1
 8003d54:	b10a      	cbz	r2, 8003d5a <_printf_common+0x26>
 8003d56:	3301      	adds	r3, #1
 8003d58:	6033      	str	r3, [r6, #0]
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	0699      	lsls	r1, r3, #26
 8003d5e:	bf42      	ittt	mi
 8003d60:	6833      	ldrmi	r3, [r6, #0]
 8003d62:	3302      	addmi	r3, #2
 8003d64:	6033      	strmi	r3, [r6, #0]
 8003d66:	6825      	ldr	r5, [r4, #0]
 8003d68:	f015 0506 	ands.w	r5, r5, #6
 8003d6c:	d106      	bne.n	8003d7c <_printf_common+0x48>
 8003d6e:	f104 0a19 	add.w	sl, r4, #25
 8003d72:	68e3      	ldr	r3, [r4, #12]
 8003d74:	6832      	ldr	r2, [r6, #0]
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	42ab      	cmp	r3, r5
 8003d7a:	dc26      	bgt.n	8003dca <_printf_common+0x96>
 8003d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d80:	1e13      	subs	r3, r2, #0
 8003d82:	6822      	ldr	r2, [r4, #0]
 8003d84:	bf18      	it	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	0692      	lsls	r2, r2, #26
 8003d8a:	d42b      	bmi.n	8003de4 <_printf_common+0xb0>
 8003d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d90:	4649      	mov	r1, r9
 8003d92:	4638      	mov	r0, r7
 8003d94:	47c0      	blx	r8
 8003d96:	3001      	adds	r0, #1
 8003d98:	d01e      	beq.n	8003dd8 <_printf_common+0xa4>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	6922      	ldr	r2, [r4, #16]
 8003d9e:	f003 0306 	and.w	r3, r3, #6
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf02      	ittt	eq
 8003da6:	68e5      	ldreq	r5, [r4, #12]
 8003da8:	6833      	ldreq	r3, [r6, #0]
 8003daa:	1aed      	subeq	r5, r5, r3
 8003dac:	68a3      	ldr	r3, [r4, #8]
 8003dae:	bf0c      	ite	eq
 8003db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003db4:	2500      	movne	r5, #0
 8003db6:	4293      	cmp	r3, r2
 8003db8:	bfc4      	itt	gt
 8003dba:	1a9b      	subgt	r3, r3, r2
 8003dbc:	18ed      	addgt	r5, r5, r3
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	341a      	adds	r4, #26
 8003dc2:	42b5      	cmp	r5, r6
 8003dc4:	d11a      	bne.n	8003dfc <_printf_common+0xc8>
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e008      	b.n	8003ddc <_printf_common+0xa8>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	4652      	mov	r2, sl
 8003dce:	4649      	mov	r1, r9
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	47c0      	blx	r8
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	d103      	bne.n	8003de0 <_printf_common+0xac>
 8003dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de0:	3501      	adds	r5, #1
 8003de2:	e7c6      	b.n	8003d72 <_printf_common+0x3e>
 8003de4:	18e1      	adds	r1, r4, r3
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	2030      	movs	r0, #48	; 0x30
 8003dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dee:	4422      	add	r2, r4
 8003df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003df8:	3302      	adds	r3, #2
 8003dfa:	e7c7      	b.n	8003d8c <_printf_common+0x58>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	4622      	mov	r2, r4
 8003e00:	4649      	mov	r1, r9
 8003e02:	4638      	mov	r0, r7
 8003e04:	47c0      	blx	r8
 8003e06:	3001      	adds	r0, #1
 8003e08:	d0e6      	beq.n	8003dd8 <_printf_common+0xa4>
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	e7d9      	b.n	8003dc2 <_printf_common+0x8e>
	...

08003e10 <_printf_i>:
 8003e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e14:	7e0f      	ldrb	r7, [r1, #24]
 8003e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e18:	2f78      	cmp	r7, #120	; 0x78
 8003e1a:	4691      	mov	r9, r2
 8003e1c:	4680      	mov	r8, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	469a      	mov	sl, r3
 8003e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e26:	d807      	bhi.n	8003e38 <_printf_i+0x28>
 8003e28:	2f62      	cmp	r7, #98	; 0x62
 8003e2a:	d80a      	bhi.n	8003e42 <_printf_i+0x32>
 8003e2c:	2f00      	cmp	r7, #0
 8003e2e:	f000 80d4 	beq.w	8003fda <_printf_i+0x1ca>
 8003e32:	2f58      	cmp	r7, #88	; 0x58
 8003e34:	f000 80c0 	beq.w	8003fb8 <_printf_i+0x1a8>
 8003e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e40:	e03a      	b.n	8003eb8 <_printf_i+0xa8>
 8003e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e46:	2b15      	cmp	r3, #21
 8003e48:	d8f6      	bhi.n	8003e38 <_printf_i+0x28>
 8003e4a:	a101      	add	r1, pc, #4	; (adr r1, 8003e50 <_printf_i+0x40>)
 8003e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e50:	08003ea9 	.word	0x08003ea9
 8003e54:	08003ebd 	.word	0x08003ebd
 8003e58:	08003e39 	.word	0x08003e39
 8003e5c:	08003e39 	.word	0x08003e39
 8003e60:	08003e39 	.word	0x08003e39
 8003e64:	08003e39 	.word	0x08003e39
 8003e68:	08003ebd 	.word	0x08003ebd
 8003e6c:	08003e39 	.word	0x08003e39
 8003e70:	08003e39 	.word	0x08003e39
 8003e74:	08003e39 	.word	0x08003e39
 8003e78:	08003e39 	.word	0x08003e39
 8003e7c:	08003fc1 	.word	0x08003fc1
 8003e80:	08003ee9 	.word	0x08003ee9
 8003e84:	08003f7b 	.word	0x08003f7b
 8003e88:	08003e39 	.word	0x08003e39
 8003e8c:	08003e39 	.word	0x08003e39
 8003e90:	08003fe3 	.word	0x08003fe3
 8003e94:	08003e39 	.word	0x08003e39
 8003e98:	08003ee9 	.word	0x08003ee9
 8003e9c:	08003e39 	.word	0x08003e39
 8003ea0:	08003e39 	.word	0x08003e39
 8003ea4:	08003f83 	.word	0x08003f83
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	602a      	str	r2, [r5, #0]
 8003eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e09f      	b.n	8003ffc <_printf_i+0x1ec>
 8003ebc:	6820      	ldr	r0, [r4, #0]
 8003ebe:	682b      	ldr	r3, [r5, #0]
 8003ec0:	0607      	lsls	r7, r0, #24
 8003ec2:	f103 0104 	add.w	r1, r3, #4
 8003ec6:	6029      	str	r1, [r5, #0]
 8003ec8:	d501      	bpl.n	8003ece <_printf_i+0xbe>
 8003eca:	681e      	ldr	r6, [r3, #0]
 8003ecc:	e003      	b.n	8003ed6 <_printf_i+0xc6>
 8003ece:	0646      	lsls	r6, r0, #25
 8003ed0:	d5fb      	bpl.n	8003eca <_printf_i+0xba>
 8003ed2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ed6:	2e00      	cmp	r6, #0
 8003ed8:	da03      	bge.n	8003ee2 <_printf_i+0xd2>
 8003eda:	232d      	movs	r3, #45	; 0x2d
 8003edc:	4276      	negs	r6, r6
 8003ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee2:	485a      	ldr	r0, [pc, #360]	; (800404c <_printf_i+0x23c>)
 8003ee4:	230a      	movs	r3, #10
 8003ee6:	e012      	b.n	8003f0e <_printf_i+0xfe>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	6820      	ldr	r0, [r4, #0]
 8003eec:	1d19      	adds	r1, r3, #4
 8003eee:	6029      	str	r1, [r5, #0]
 8003ef0:	0605      	lsls	r5, r0, #24
 8003ef2:	d501      	bpl.n	8003ef8 <_printf_i+0xe8>
 8003ef4:	681e      	ldr	r6, [r3, #0]
 8003ef6:	e002      	b.n	8003efe <_printf_i+0xee>
 8003ef8:	0641      	lsls	r1, r0, #25
 8003efa:	d5fb      	bpl.n	8003ef4 <_printf_i+0xe4>
 8003efc:	881e      	ldrh	r6, [r3, #0]
 8003efe:	4853      	ldr	r0, [pc, #332]	; (800404c <_printf_i+0x23c>)
 8003f00:	2f6f      	cmp	r7, #111	; 0x6f
 8003f02:	bf0c      	ite	eq
 8003f04:	2308      	moveq	r3, #8
 8003f06:	230a      	movne	r3, #10
 8003f08:	2100      	movs	r1, #0
 8003f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f0e:	6865      	ldr	r5, [r4, #4]
 8003f10:	60a5      	str	r5, [r4, #8]
 8003f12:	2d00      	cmp	r5, #0
 8003f14:	bfa2      	ittt	ge
 8003f16:	6821      	ldrge	r1, [r4, #0]
 8003f18:	f021 0104 	bicge.w	r1, r1, #4
 8003f1c:	6021      	strge	r1, [r4, #0]
 8003f1e:	b90e      	cbnz	r6, 8003f24 <_printf_i+0x114>
 8003f20:	2d00      	cmp	r5, #0
 8003f22:	d04b      	beq.n	8003fbc <_printf_i+0x1ac>
 8003f24:	4615      	mov	r5, r2
 8003f26:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f2a:	fb03 6711 	mls	r7, r3, r1, r6
 8003f2e:	5dc7      	ldrb	r7, [r0, r7]
 8003f30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f34:	4637      	mov	r7, r6
 8003f36:	42bb      	cmp	r3, r7
 8003f38:	460e      	mov	r6, r1
 8003f3a:	d9f4      	bls.n	8003f26 <_printf_i+0x116>
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d10b      	bne.n	8003f58 <_printf_i+0x148>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	07de      	lsls	r6, r3, #31
 8003f44:	d508      	bpl.n	8003f58 <_printf_i+0x148>
 8003f46:	6923      	ldr	r3, [r4, #16]
 8003f48:	6861      	ldr	r1, [r4, #4]
 8003f4a:	4299      	cmp	r1, r3
 8003f4c:	bfde      	ittt	le
 8003f4e:	2330      	movle	r3, #48	; 0x30
 8003f50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f58:	1b52      	subs	r2, r2, r5
 8003f5a:	6122      	str	r2, [r4, #16]
 8003f5c:	f8cd a000 	str.w	sl, [sp]
 8003f60:	464b      	mov	r3, r9
 8003f62:	aa03      	add	r2, sp, #12
 8003f64:	4621      	mov	r1, r4
 8003f66:	4640      	mov	r0, r8
 8003f68:	f7ff fee4 	bl	8003d34 <_printf_common>
 8003f6c:	3001      	adds	r0, #1
 8003f6e:	d14a      	bne.n	8004006 <_printf_i+0x1f6>
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	b004      	add	sp, #16
 8003f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	f043 0320 	orr.w	r3, r3, #32
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	4833      	ldr	r0, [pc, #204]	; (8004050 <_printf_i+0x240>)
 8003f84:	2778      	movs	r7, #120	; 0x78
 8003f86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	6829      	ldr	r1, [r5, #0]
 8003f8e:	061f      	lsls	r7, r3, #24
 8003f90:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f94:	d402      	bmi.n	8003f9c <_printf_i+0x18c>
 8003f96:	065f      	lsls	r7, r3, #25
 8003f98:	bf48      	it	mi
 8003f9a:	b2b6      	uxthmi	r6, r6
 8003f9c:	07df      	lsls	r7, r3, #31
 8003f9e:	bf48      	it	mi
 8003fa0:	f043 0320 	orrmi.w	r3, r3, #32
 8003fa4:	6029      	str	r1, [r5, #0]
 8003fa6:	bf48      	it	mi
 8003fa8:	6023      	strmi	r3, [r4, #0]
 8003faa:	b91e      	cbnz	r6, 8003fb4 <_printf_i+0x1a4>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	f023 0320 	bic.w	r3, r3, #32
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	e7a7      	b.n	8003f08 <_printf_i+0xf8>
 8003fb8:	4824      	ldr	r0, [pc, #144]	; (800404c <_printf_i+0x23c>)
 8003fba:	e7e4      	b.n	8003f86 <_printf_i+0x176>
 8003fbc:	4615      	mov	r5, r2
 8003fbe:	e7bd      	b.n	8003f3c <_printf_i+0x12c>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	6826      	ldr	r6, [r4, #0]
 8003fc4:	6961      	ldr	r1, [r4, #20]
 8003fc6:	1d18      	adds	r0, r3, #4
 8003fc8:	6028      	str	r0, [r5, #0]
 8003fca:	0635      	lsls	r5, r6, #24
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	d501      	bpl.n	8003fd4 <_printf_i+0x1c4>
 8003fd0:	6019      	str	r1, [r3, #0]
 8003fd2:	e002      	b.n	8003fda <_printf_i+0x1ca>
 8003fd4:	0670      	lsls	r0, r6, #25
 8003fd6:	d5fb      	bpl.n	8003fd0 <_printf_i+0x1c0>
 8003fd8:	8019      	strh	r1, [r3, #0]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	6123      	str	r3, [r4, #16]
 8003fde:	4615      	mov	r5, r2
 8003fe0:	e7bc      	b.n	8003f5c <_printf_i+0x14c>
 8003fe2:	682b      	ldr	r3, [r5, #0]
 8003fe4:	1d1a      	adds	r2, r3, #4
 8003fe6:	602a      	str	r2, [r5, #0]
 8003fe8:	681d      	ldr	r5, [r3, #0]
 8003fea:	6862      	ldr	r2, [r4, #4]
 8003fec:	2100      	movs	r1, #0
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f7fc f8f6 	bl	80001e0 <memchr>
 8003ff4:	b108      	cbz	r0, 8003ffa <_printf_i+0x1ea>
 8003ff6:	1b40      	subs	r0, r0, r5
 8003ff8:	6060      	str	r0, [r4, #4]
 8003ffa:	6863      	ldr	r3, [r4, #4]
 8003ffc:	6123      	str	r3, [r4, #16]
 8003ffe:	2300      	movs	r3, #0
 8004000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004004:	e7aa      	b.n	8003f5c <_printf_i+0x14c>
 8004006:	6923      	ldr	r3, [r4, #16]
 8004008:	462a      	mov	r2, r5
 800400a:	4649      	mov	r1, r9
 800400c:	4640      	mov	r0, r8
 800400e:	47d0      	blx	sl
 8004010:	3001      	adds	r0, #1
 8004012:	d0ad      	beq.n	8003f70 <_printf_i+0x160>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	079b      	lsls	r3, r3, #30
 8004018:	d413      	bmi.n	8004042 <_printf_i+0x232>
 800401a:	68e0      	ldr	r0, [r4, #12]
 800401c:	9b03      	ldr	r3, [sp, #12]
 800401e:	4298      	cmp	r0, r3
 8004020:	bfb8      	it	lt
 8004022:	4618      	movlt	r0, r3
 8004024:	e7a6      	b.n	8003f74 <_printf_i+0x164>
 8004026:	2301      	movs	r3, #1
 8004028:	4632      	mov	r2, r6
 800402a:	4649      	mov	r1, r9
 800402c:	4640      	mov	r0, r8
 800402e:	47d0      	blx	sl
 8004030:	3001      	adds	r0, #1
 8004032:	d09d      	beq.n	8003f70 <_printf_i+0x160>
 8004034:	3501      	adds	r5, #1
 8004036:	68e3      	ldr	r3, [r4, #12]
 8004038:	9903      	ldr	r1, [sp, #12]
 800403a:	1a5b      	subs	r3, r3, r1
 800403c:	42ab      	cmp	r3, r5
 800403e:	dcf2      	bgt.n	8004026 <_printf_i+0x216>
 8004040:	e7eb      	b.n	800401a <_printf_i+0x20a>
 8004042:	2500      	movs	r5, #0
 8004044:	f104 0619 	add.w	r6, r4, #25
 8004048:	e7f5      	b.n	8004036 <_printf_i+0x226>
 800404a:	bf00      	nop
 800404c:	080041a5 	.word	0x080041a5
 8004050:	080041b6 	.word	0x080041b6

08004054 <memmove>:
 8004054:	4288      	cmp	r0, r1
 8004056:	b510      	push	{r4, lr}
 8004058:	eb01 0402 	add.w	r4, r1, r2
 800405c:	d902      	bls.n	8004064 <memmove+0x10>
 800405e:	4284      	cmp	r4, r0
 8004060:	4623      	mov	r3, r4
 8004062:	d807      	bhi.n	8004074 <memmove+0x20>
 8004064:	1e43      	subs	r3, r0, #1
 8004066:	42a1      	cmp	r1, r4
 8004068:	d008      	beq.n	800407c <memmove+0x28>
 800406a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800406e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004072:	e7f8      	b.n	8004066 <memmove+0x12>
 8004074:	4402      	add	r2, r0
 8004076:	4601      	mov	r1, r0
 8004078:	428a      	cmp	r2, r1
 800407a:	d100      	bne.n	800407e <memmove+0x2a>
 800407c:	bd10      	pop	{r4, pc}
 800407e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004086:	e7f7      	b.n	8004078 <memmove+0x24>

08004088 <_sbrk_r>:
 8004088:	b538      	push	{r3, r4, r5, lr}
 800408a:	4d06      	ldr	r5, [pc, #24]	; (80040a4 <_sbrk_r+0x1c>)
 800408c:	2300      	movs	r3, #0
 800408e:	4604      	mov	r4, r0
 8004090:	4608      	mov	r0, r1
 8004092:	602b      	str	r3, [r5, #0]
 8004094:	f7fd f96a 	bl	800136c <_sbrk>
 8004098:	1c43      	adds	r3, r0, #1
 800409a:	d102      	bne.n	80040a2 <_sbrk_r+0x1a>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	b103      	cbz	r3, 80040a2 <_sbrk_r+0x1a>
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
 80040a4:	200002f8 	.word	0x200002f8

080040a8 <memcpy>:
 80040a8:	440a      	add	r2, r1
 80040aa:	4291      	cmp	r1, r2
 80040ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80040b0:	d100      	bne.n	80040b4 <memcpy+0xc>
 80040b2:	4770      	bx	lr
 80040b4:	b510      	push	{r4, lr}
 80040b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040be:	4291      	cmp	r1, r2
 80040c0:	d1f9      	bne.n	80040b6 <memcpy+0xe>
 80040c2:	bd10      	pop	{r4, pc}

080040c4 <_realloc_r>:
 80040c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c8:	4680      	mov	r8, r0
 80040ca:	4614      	mov	r4, r2
 80040cc:	460e      	mov	r6, r1
 80040ce:	b921      	cbnz	r1, 80040da <_realloc_r+0x16>
 80040d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040d4:	4611      	mov	r1, r2
 80040d6:	f7ff bc49 	b.w	800396c <_malloc_r>
 80040da:	b92a      	cbnz	r2, 80040e8 <_realloc_r+0x24>
 80040dc:	f7ff fbda 	bl	8003894 <_free_r>
 80040e0:	4625      	mov	r5, r4
 80040e2:	4628      	mov	r0, r5
 80040e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e8:	f000 f81b 	bl	8004122 <_malloc_usable_size_r>
 80040ec:	4284      	cmp	r4, r0
 80040ee:	4607      	mov	r7, r0
 80040f0:	d802      	bhi.n	80040f8 <_realloc_r+0x34>
 80040f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040f6:	d812      	bhi.n	800411e <_realloc_r+0x5a>
 80040f8:	4621      	mov	r1, r4
 80040fa:	4640      	mov	r0, r8
 80040fc:	f7ff fc36 	bl	800396c <_malloc_r>
 8004100:	4605      	mov	r5, r0
 8004102:	2800      	cmp	r0, #0
 8004104:	d0ed      	beq.n	80040e2 <_realloc_r+0x1e>
 8004106:	42bc      	cmp	r4, r7
 8004108:	4622      	mov	r2, r4
 800410a:	4631      	mov	r1, r6
 800410c:	bf28      	it	cs
 800410e:	463a      	movcs	r2, r7
 8004110:	f7ff ffca 	bl	80040a8 <memcpy>
 8004114:	4631      	mov	r1, r6
 8004116:	4640      	mov	r0, r8
 8004118:	f7ff fbbc 	bl	8003894 <_free_r>
 800411c:	e7e1      	b.n	80040e2 <_realloc_r+0x1e>
 800411e:	4635      	mov	r5, r6
 8004120:	e7df      	b.n	80040e2 <_realloc_r+0x1e>

08004122 <_malloc_usable_size_r>:
 8004122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004126:	1f18      	subs	r0, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	bfbc      	itt	lt
 800412c:	580b      	ldrlt	r3, [r1, r0]
 800412e:	18c0      	addlt	r0, r0, r3
 8004130:	4770      	bx	lr
	...

08004134 <_init>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	bf00      	nop
 8004138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413a:	bc08      	pop	{r3}
 800413c:	469e      	mov	lr, r3
 800413e:	4770      	bx	lr

08004140 <_fini>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	bf00      	nop
 8004144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004146:	bc08      	pop	{r3}
 8004148:	469e      	mov	lr, r3
 800414a:	4770      	bx	lr
